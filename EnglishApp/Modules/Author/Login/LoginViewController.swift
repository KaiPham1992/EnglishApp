//
//  LoginViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 5/9/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import CryptoSwift
import GoogleSignIn
import FBSDKLoginKit
import FBSDKCoreKit
import SystemConfiguration

enum LoginType {
    case gmail
    case facebook
    case normal
}


class LoginViewController: BaseViewController {

	var presenter: LoginPresenterProtocol?
    
    @IBOutlet weak var vEmail: AppTextField!
    @IBOutlet weak var vPassword: AppTextField!
    @IBOutlet weak var btnLogin: UIButton!
    @IBOutlet weak var lbFbGmail: UILabel!
    @IBOutlet weak var lbForgot: UILabel!
    @IBOutlet weak var lbRegister: UILabel!
    @IBOutlet weak var lbError: UILabel!
    
    
    var loginType = LoginType.normal
    var paramLogin: Any?

	override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    override func setUpViews() {
        super.setUpViews()
        
        GIDSignIn.sharedInstance().delegate = self
        GIDSignIn.sharedInstance().uiDelegate = self
    }
    
    override func setTitleUI() {
        vEmail.setTitleAndPlaceHolder(title: LocalizableKey.LoginEmail.showLanguage, placeHolder: LocalizableKey.LoginEmailPlaceHolder.showLanguage)
        
        vPassword.setTitleAndPlaceHolder(title: LocalizableKey.LoginPassword.showLanguage, placeHolder: "********")
        vPassword.tfInput.isSecureTextEntry = true 
        
        btnLogin.setTitle(LocalizableKey.LoginButtonLogin.showLanguage, for: .normal)
        lbFbGmail.text = LocalizableKey.FBorGmail.showLanguage
        lbForgot.text = LocalizableKey.ForgotPass.showLanguage
        
        let attr = NSMutableAttributedString()
        let attr1 = LocalizableKey.NotYetAccount.showLanguage.toAttributedString(color: AppColor.black)
        let attr2 = " \(LocalizableKey.Register.showLanguage)".toAttributedString(color: AppColor.black, font: AppFont.fontBold18, isUnderLine: true)
        attr.append(attr1)
        attr.append(attr2)
        lbRegister.attributedText = attr
        
        lbError.text = ""
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        self.hideNavigation()
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
        self.showNavigation()
    }
    
    @IBAction func btnLoginTapped() {
        if validateInputData() {
            presenter?.login(email: vEmail.tfInput.text&, password: vPassword.tfInput.text&)
        }
    }
    
    @IBAction func btnForgotPassTapped() {
        self.push(controller: ForgotPasswordRouter.createModule())
    }
    
    @IBAction func btnRegisterTapped() {
        self.push(controller: SignUpRouter.createModule())
    }
    
    @IBAction func btnLoginGmail() {
        self.view.endEditing(true)
        GIDSignIn.sharedInstance().signOut()
        GIDSignIn.sharedInstance().signIn()
    }
    
    @IBAction func btnLoginFacebook() {
        self.view.endEditing(true)
        self.FBlogin()
    }
    

}

extension LoginViewController {
    func validateInputData() -> Bool {
        
        if self.vEmail.tfInput.text == "" || self.vPassword.tfInput.text == "" {
            hideError(isHidden: false, message: LocalizableKey.emptyLoginEmailPassword.showLanguage)
            return false
        }
        
        if let email = self.vEmail.tfInput.text, email.isValidEmail() == false {
            hideError(isHidden: false, message:  LocalizableKey.invalidLoginEmail.showLanguage)
            return false
        }
        if let password = self.vPassword.tfInput.text, password.count < 6 {
            hideError(isHidden: false, message:  LocalizableKey.invalidLoginPassword.showLanguage)
            return false
        }
        hideError()
        return true
    }
    
    func hideError(isHidden: Bool = true, message: String? = nil){
        lbError.isHidden = isHidden
        lbError.text = message ?? ""
    }
}


extension LoginViewController: LoginViewProtocol {
    func didLogin(user: UserEntity?) {
        guard let _user = user else { return }
        
        UserDefaultHelper.shared.saveUser(user: _user)
    }
    
    func didError(error: APIError?) {
        if let message = error?.message {
            switch message {
            case "INVALID_USERNAME_OR_PASSWORD":
                UserDefaultHelper.shared.clearUser()
                hideError(isHidden: false, message:  LocalizableKey.emptyLoginEmailPassword.showLanguage)
                break
            case "USER_IS_NOT_VERIFY":
                break
            case "PHONE_IS_EXISTED":
               break
            default:
                break
            }
        }
        
    }
}
