//
//  MenuViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 5/9/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

protocol MenuViewControllerDelegate: class {
    func controllerSelected(controller: UIViewController)
}


class MenuViewController: UIViewController, MenuViewProtocol {
    @IBOutlet weak var tbMenu: UITableView!

	var presenter: MenuPresenterProtocol?
    weak var delegate: MenuProtocol?
    weak var delegateController: MenuViewControllerDelegate?
    
    var listMenuItem = [MenuItem]() {
        didSet {
            tbMenu.reloadData()
        }
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        configureTable()
        listMenuItem = MenuItem.toArray()
    }

}

extension MenuViewController: UITableViewDelegate, UITableViewDataSource {
    func configureTable() {
        tbMenu.delegate = self
        tbMenu.dataSource = self
        tbMenu.registerXibFile(MenuCell.self)
        tbMenu.separatorStyle = .none
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(MenuCell.self, for: indexPath)
        cell.menuItem = self.listMenuItem[indexPath.item]
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listMenuItem.count
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 60
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let itemSelected = self.listMenuItem[indexPath.item]
        self.listMenuItem.forEach { item in
            item.isSelected = false
        }
        
        itemSelected.isSelected = true
        pushViewController(itemSelected: itemSelected)
        
        tbMenu.reloadData()
    }
    
    func pushViewController(itemSelected: MenuItem) {
        
        guard let itemIcon = itemSelected.imgIcon else { return }
        switch itemIcon {
        case AppImage.imgInfo:
            delegateController?.controllerSelected(controller: ProfileRouter.createModule())
            AppRouter.shared.pushTo(viewController: ProfileRouter.createModule())
            
        case AppImage.imgQA:
            delegateController?.controllerSelected(controller: QARouter.createModule())
            AppRouter.shared.pushTo(viewController: QARouter.createModule())
            
        case AppImage.imgChangePass:
            delegateController?.controllerSelected(controller: ChangePasswordRouter.createModule())
            AppRouter.shared.pushTo(viewController: ChangePasswordRouter.createModule())
            
        case AppImage.imgLanguage:
            delegateController?.controllerSelected(controller: ChangeLanguageRouter.createModule())
            AppRouter.shared.pushTo(viewController: ChangeLanguageRouter.createModule())
        case AppImage.imgSaved:
            delegateController?.controllerSelected(controller: SaveDictionaryRouter.createModule())
            AppRouter.shared.pushTo(viewController: SaveDictionaryRouter.createModule())
        case AppImage.imgTop:
            delegateController?.controllerSelected(controller: BXHRouter.createModule())
            AppRouter.shared.pushTo(viewController: BXHRouter.createModule())
        case AppImage.imgHistoryCheck:
            delegateController?.controllerSelected(controller: HistoryExerciseRouter.createModule())
            AppRouter.shared.pushTo(viewController: HistoryExerciseRouter.createModule())
            
        case AppImage.imgPrivacy:
            delegateController?.controllerSelected(controller: WebViewController.initFromNib())
            AppRouter.shared.pushTo(viewController: WebViewController.initFromNib())
        case AppImage.imgLogout:
            PopUpHelper.shared.showLogout(completionNo: {
                print("No")
            }) {
                self.logout()
            }
        default:
            break
        }
    }
    
}

extension MenuViewController {
    func logout() {
        ProgressView.shared.show()
        Provider.shared.userAPIService.logout(success: { (_) in
            ProgressView.shared.hide()
            UserDefaultHelper.shared.clearUser()
            AppRouter.shared.openLogin()
        }) { (error) in
            ProgressView.shared.hide()
        }
    }
}
