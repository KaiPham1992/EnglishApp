//
//  DetailLessonViewController.swift
//  EnglishApp
//
//  Created vinova on 5/18/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import WebKit

enum DetailLessonVocabulary{
    case detailLesson
    case vocabulary
}
class DetailLessonViewController: BaseViewController {

    @IBOutlet weak var tvContent: UITextView!
    var presenter: DetailLessonPresenterProtocol?
    var type : DetailLessonVocabulary = .detailLesson
    var lesson: ItemLesson?
    var idLesson : String = "0"
    var callbackCallAgainAPI : (()->())?
    var isClickLikeImage = false
    var vocabulary : WordExplainEntity?
    var idVocabulary : Int?
    var font = ""
    var isLike = 0 {
        didSet{
            self.btnLike.setBackgroundImage(isLike == 0 ? UIImage(named:"Material_Icons_white_favorite") : #imageLiteral(resourceName: "Material_Icons_white_favorite-1") , for: .normal)
        }
    }
    
    var showProgressView : Bool = true
    
    var viewMessage = ViewMessage(frame: CGRect(x: 0, y: 0, width: 30, height: 30))
    
    override func setUpViews() {
        super.setUpViews()
        if type == .detailLesson {
            let tap = UITapGestureRecognizer(target: self, action: #selector(handleTap))
            tap.numberOfTapsRequired = 2
            tvContent.addGestureRecognizer(tap)
        }
    }
    
    @objc func handleTap(sender: UITapGestureRecognizer){
        let point = sender.location(in: tvContent)
        if let detectedWord = getWordAtPosition(point){
            self.presenter?.searchVocabulary(word: detectedWord, position: point)
        }
    }
    
    private func getWordAtPosition(_ point: CGPoint) -> String?{
        if let textPosition = tvContent.closestPosition(to: point) {
            if let range = tvContent.tokenizer.rangeEnclosingPosition(textPosition, with: .word, inDirection: UITextDirection(rawValue: 1)) {
                return tvContent.text(in: range)
            }
        }
        return nil
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(true)
        if showProgressView {
            ProgressView.shared.show()
            self.showProgressView = false
        }
        
        if let _lesson = lesson {
            idLesson = _lesson._id ?? "0"
        }
        if idLesson != "0" {
            self.presenter?.getLessonDetail(lesson_id: Int(self.idLesson) ?? 0)
        }
        
        if let _ = self.vocabulary {
            reloadView()
        }
        
        if let _idVocabulary = idVocabulary {
            self.presenter?.getViewVocabulary(wordId: _idVocabulary)
        }
    }
    
    override func btnBackTapped() {
        if isClickLikeImage {
            self.callbackCallAgainAPI?()
        }
        super.btnBackTapped()
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        addBackToNavigation()
        if type == .detailLesson{
            viewMessage.action = { [unowned self] in
                self.gotoComment()
            }
            addTwoViewToNavigation(view1: viewMessage, image1: nil,action1: nil, view2: nil, image2: UIImage(named:"Material_Icons_white_favorite")!, action2: #selector(clickHeart))
            viewMessage.isHidden = true
        } else {
            addButtonLikeToNavigation(image: UIImage(named:"Material_Icons_white_favorite")!, actionSelector: #selector(clickHeart))
             setTitleNavigation(title: LocalizableKey.vocabularyDetail.showLanguage)
        }
        btnLike.isHidden = true
        
    }
    
    func gotoComment() {
        if UserDefaultHelper.shared.loginUserInfo?.email == emailDefault ||  (UserDefaultHelper.shared.loginUserInfo?.email == nil  && UserDefaultHelper.shared.loginUserInfo?.socialType == "normal") {
            let vc = LoginRouter.createModule()
            vc.callBackLoginSuccessed = {[unowned self] in
                self.goHome()
            }
            self.present(controller: vc, animated: true)
        } else {
            self.comment()
        }
    }
    
    private func goHome(){
        if let tabbar = self.tabBarController as? MainTabbar {
            tabbar.gotoHome()
        }
    }
    
    private func comment(){
        guard let isUserPremium = UserDefaultHelper.shared.loginUserInfo?.isUserPremium else { return }
        if isUserPremium {
            self.push(controller: CommentRouter.createModule(id: self.idLesson),animated: true)
        } else {
            PopUpHelper.shared.showUpdateFeature(completeUpdate: {[unowned self] in
                let vc = StudyPackDetailRouter.createModule(id: "-1")
                self.push(controller: vc)
            }) {
                
            }
        }
    }
    
    @objc func clickHeart(){
        if UserDefaultHelper.shared.loginUserInfo?.email != emailDefault {
            if type == .detailLesson {
                isClickLikeImage = true
                isLike = isLike == 0 ? 1 : 0
            } else {
                isClickLikeImage = true
                isLike = isLike == 0 ? 1 : 0
            }
            self.presenter?.likeLesson(idLesson: Int(self.idLesson) ?? 0 ,idWord: self.vocabulary != nil ? self.vocabulary?.id : self.presenter?.vocabulary?.id , isFavorite: self.isLike)
        } else {
            let vc = LoginRouter.createModule()
            vc.callBackLoginSuccessed = {[unowned self] in
                self.goHome()
            }
            self.present(controller: vc, animated: true)
        }
    }
}
extension DetailLessonViewController:DetailLessonViewProtocol{
    
    func searchVocabularySuccessed(wordEntity: WordExplainEntity, position: CGPoint) {
        let pointConvert = tvContent.convert(position, to: self.view)
        self.showPopoverVocabulary(x: pointConvert.x, y: pointConvert.y, size: CGSize.zero, word: wordEntity)
    }
    
    func reloadView() {
        if type == .detailLesson {
            setTitleNavigation(title: self.presenter?.lessonDetail?.name ?? "")
            if let htmlString = self.presenter?.self.lessonDetail?.content{
                tvContent.attributedText = htmlString.attributedString()
            }
            if let comment = self.presenter?.lessonDetail?.unread_comments{
                self.viewMessage.setupNumber(number: comment)
            } else {
                self.viewMessage.setupNumber(number: 0)
            }
            
            if let _ = self.presenter?.lessonDetail?.is_favorite {
                self.isLike = 1
                self.btnLike.setBackgroundImage(#imageLiteral(resourceName: "Material_Icons_white_favorite-1"), for: .normal)
            } else {
                self.isLike = 0
                self.btnLike.setBackgroundImage(UIImage(named:"Material_Icons_white_favorite")!, for: .normal)
            }
            viewMessage.isHidden = false
        } else {
            if let vocabulary = self.vocabulary {
                setTitleNavigation(title: vocabulary.word)
                let attributeString = self.presenter?.vocabulary?.explain.htmlToString ?? ""
                tvContent.attributedText = NSAttributedString(string: attributeString, attributes: [NSAttributedString.Key.font : AppFont.fontRegular14])
                if vocabulary.is_favorite {
                    self.isLike = 1
                    self.btnLike.setBackgroundImage(#imageLiteral(resourceName: "Material_Icons_white_favorite-1"), for: .normal)
                } else {
                    self.isLike = 0
                    self.btnLike.setBackgroundImage(UIImage(named:"Material_Icons_white_favorite")!, for: .normal)
                }
            } else {
                let attributeString = self.presenter?.vocabulary?.explain.htmlToString ?? ""
                tvContent.attributedText = NSAttributedString(string: attributeString, attributes: [NSAttributedString.Key.font : AppFont.fontRegular14])
//                tvContent.attributedText = self.presenter?.vocabulary?.explain.attributedString()
                if (self.presenter?.vocabulary?.is_favorite ?? false) {
                    self.isLike = 1
                    self.btnLike.setBackgroundImage(#imageLiteral(resourceName: "Material_Icons_white_favorite-1"), for: .normal)
                } else {
                    self.isLike = 0
                    self.btnLike.setBackgroundImage(UIImage(named:"Material_Icons_white_favorite")!, for: .normal)
                }
            }
        }
        btnLike.isHidden = false
    }
}
