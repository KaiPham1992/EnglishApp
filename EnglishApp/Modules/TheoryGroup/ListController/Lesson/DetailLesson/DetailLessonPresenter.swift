//
//  DetailLessonPresenter.swift
//  EnglishApp
//
//  Created vinova on 5/18/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class DetailLessonPresenter: DetailLessonPresenterProtocol, DetailLessonInteractorOutputProtocol {
   
    weak private var view: DetailLessonViewProtocol?
    var interactor: DetailLessonInteractorInputProtocol?
    private let router: DetailLessonWireframeProtocol
    var lessonDetail: LessonCatelogyDetail?
    var vocabulary : WordExplainEntity?

    init(interface: DetailLessonViewProtocol, interactor: DetailLessonInteractorInputProtocol?, router: DetailLessonWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func getLessonDetail(lesson_id: Int) {
        self.interactor?.getLessonDetail(lesson_id: lesson_id)
    }
    
    func getViewVocabulary(wordId: Int) {
        self.interactor?.getViewVocabulary(wordId: wordId)
    }
    
    func getViewVocabularySuccessed(vocabulary: WordExplainEntity) {
        self.vocabulary = vocabulary
        self.view?.reloadView()
    }
    
    func getLessonDetailSuccessed(lessonDetail: LessonCatelogyDetail) {
        self.lessonDetail = lessonDetail
        self.view?.reloadView()
    }
    
    func getTitle() -> String?{
        return self.lessonDetail?.name
    }
    
    func getNumberComment() -> Int? {
        return lessonDetail?.unread_comments
    }
    
    func likeLesson(idLesson: Int,idWord: Int?, isFavorite: Int) {
        self.interactor?.likeLesson(idLesson: idLesson, idWord: idWord, isFavorite: isFavorite)
    }
    
    func getToggleLike() -> Int?{
        return lessonDetail?.is_favorite
    }

    func searchVocabulary(word: String, position: CGPoint) {
        self.interactor?.searchVocabulary(word: word, position: position)
    }
    
    func searchVocabularySuccessed(wordEntity: WordExplainEntity, position: CGPoint) {
        self.view?.searchVocabularySuccessed(wordEntity: wordEntity, position: position)
    }
}
