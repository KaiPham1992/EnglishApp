//
//  FindDetailExerciseViewController.swift
//  EnglishApp
//
//  Created Steve on 12/7/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class FindDetailExerciseViewController: BaseViewController {
	var presenter: FindDetailExercisePresenterProtocol?
    
    @IBOutlet weak var tbvResultQuestion: UITableView!
    @IBOutlet weak var tvContent: UITextView!
    @IBOutlet weak var vAudio: UIView!
    
    var findDetail : TestResultProfileEntity!
    
    var callbackMinusMoney : (()->())?

    @IBAction func reportQuestion(_ sender: Any) {
        PopUpHelper.shared.showReportQuestion(cancel: {
        }) { [unowned self] (message) in
            self.presenter?.reportQuestion(questionDetailId: Int(self.findDetail.question_id ?? "0") ?? 0, content: message&)
        }
    }
    
    var isMinusMoney = false

    override func setUpViews() {
        super.setUpViews()
        tvContent.contentInset = UIEdgeInsets.init(top: 0, left: 0, bottom: 100, right: 0)
        tbvResultQuestion.registerXibFile(CellResultFillQuestion.self)
        tbvResultQuestion.registerXibFile(CellResultChoice.self)
        tbvResultQuestion.dataSource = self
        tbvResultQuestion.delegate = self
        let tap = UITapGestureRecognizer(target: self, action: #selector(handleTap))
        tap.numberOfTapsRequired = 2
        tvContent.addGestureRecognizer(tap)
        tvContent.attributedText = (findDetail.title ?? "").convertToAttributedString()
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        addBackToNavigation()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        if let tab = tvContent.gestureRecognizers, let item = tab.first {
            tvContent.removeGestureRecognizer(item)
        }
    }
    
    @objc func handleTap(sender: UITapGestureRecognizer){
         let point = sender.location(in: tvContent)
         if let detectedWord = getWordAtPosition(point){
             self.presenter?.searchVocabulary(word: detectedWord, position: tvContent.convert(point, to: self.view))
         }
     }
        
    private func getWordAtPosition(_ point: CGPoint) -> String?{
        if let textPosition = tvContent.closestPosition(to: point) {
            if let range = tvContent.tokenizer.rangeEnclosingPosition(textPosition, with: .word, inDirection: UITextDirection(rawValue: 1)) {
                return tvContent.text(in: range)
            }
        }
        return nil
    }
}

extension FindDetailExerciseViewController : FindDetailExerciseViewProtocol {
    func reportQuestionSuccessed() {
        PopUpHelper.shared.showThanks(completionYes: {
            
        })
    }
    
    func searchVocabularySuccessed(wordEntity: WordExplainEntity, position: CGPoint) {
        self.showPopoverVocabulary(x: position.x, y: position.y, size: CGSize.zero, word: wordEntity)
    }
}

extension FindDetailExerciseViewController : UITableViewDelegate{
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
}
extension FindDetailExerciseViewController: UITableViewDataSource{
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        guard let _ = findDetail.type else {
            return 0
        }
        return findDetail.answer.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let type = findDetail.type else {
            return UITableViewCell()
        }
        if type == "1" {
            let cell = tableView.dequeue(CellResultChoice.self, for: indexPath)
            cell.indexPath = indexPath
            cell.setupCell(option: findDetail.answer[indexPath.row], status: "0", value: "")
            return cell
        }
        let cell = tableView.dequeue(CellResultFillQuestion.self, for: indexPath)
        cell.indexPath = indexPath
        cell.setupCell(option: findDetail.answer[indexPath.row])
        return cell
    }
    
    func tableView(_ tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {
        let view = UIView.init()
        let headerView = ViewHeaderResultExercise()
        headerView.translatesAutoresizingMaskIntoConstraints = false
        view.addSubview(headerView)
        headerView.fillToView(view: view)
        //show UI question
        headerView.setupCell(index: section + 1, content: findDetail.name ?? "")
        headerView.callbackExplainQuestion = {[weak self] (section) in
            guard let self = self else {return}
            self.actionExplainQuestion(section: section)
        }
        headerView.callbackRelatedGrammar = {[weak self] (section) in
            guard let self = self else {return}
            self.actionRelatedGrammar(section: section)
        }
        headerView.callbackDoubleTap = {[weak self] (word, point) in
            let newPoint = headerView.convert(point, to: self?.view)
            self?.presenter?.searchVocabulary(word: word, position: newPoint)
        }
        return view
    }
       
    func tableView(_ tableView: UITableView, estimatedHeightForHeaderInSection section: Int) -> CGFloat {
        return 60
    }
       
    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func actionExplainQuestion(section: Int){
        if !isMinusMoney {
            self.minusMoney(callback: { [weak self] (isSuccessed: Bool) in
                guard let self = self else {return}
                if isSuccessed {
                    self.isMinusMoney = true
                    self.callbackMinusMoney?()
                    let vc = ExplainExerciseGroupRouter.createModule(id: Int(self.findDetail.question_details_id ?? "0") ?? 0)
                    self.push(controller: vc)
                } else {
                    PopUpHelper.shared.showYesNo(message: LocalizableKey.honey_diamond_not_enough.showLanguage, completionNo: nil) { [unowned self] in
                        let controller = StoreViewController()
                        self.push(controller: controller)
                    }
                }
            })
            return
        }
        let vc = ExplainExerciseGroupRouter.createModule(id: Int(findDetail.question_details_id ?? "0") ?? 0)
        self.push(controller: vc)
    }
    
    func actionRelatedGrammar(section: Int){
        let vc = RelatedGrammarRouter.createModule(id: Int(findDetail.question_details_id ?? "0") ?? 0)
        self.push(controller: vc)
    }
    
    private func minusMoney(callback: @escaping (_ isSuccessed: Bool) -> ()) {
        let numberDiamond = UserDefaultHelper.shared.loginUserInfo?.amountDiamond ?? 0
        let numberHoney = UserDefaultHelper.shared.loginUserInfo?.amountHoney ?? 0
        if numberHoney < 5 && numberDiamond < 50 {
            PopUpHelper.shared.showYesNo(message: LocalizableKey.honey_diamond_not_enough.showLanguage, completionNo: nil) { [unowned self] in
                let controller = StoreViewController()
                self.push(controller: controller)
            }
        } else {
            PopUpHelper.shared.showYesNo(message: LocalizableKey.feeFind.showLanguage, completionNo: nil) {
                [unowned self] in
                self.presenter?.checkAmountSearchExercise(callback: callback)
            }
        }
    }
}

