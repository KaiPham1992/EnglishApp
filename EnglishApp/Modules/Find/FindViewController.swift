//
//  FindViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 6/8/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class FindViewController: BaseTableViewController {
    
    @IBOutlet weak var resultsTableView: UITableView!
    @IBOutlet weak var vAppSearch: AppSearchBar!
    @IBOutlet weak var lblMessage: UILabel!
    
    var presenter: FindPresenterProtocol?
    var type : TypeViewSearch = .searchExercise
    var timer: Timer?
    var keySearch = ""
    
    override func setUpViews() {
        super.setUpViews()
        initTableView(tableView: resultsTableView)
        lblMessage.attributedText = NSAttributedString(string: "\(type == .searchExercise ? LocalizableKey.feeFind.showLanguage : "")")
        vAppSearch.setTitleAndPlaceHolder(placeHolder: LocalizableKey.findExcersise.showLanguage)
        vAppSearch.actionSearch = { [weak self] (text) in
            guard let self = self else { return }
            ProgressView.shared.show()
            self.dismissKeyBoard()
            self.prepareForSearching(text: text)
        }
        vAppSearch.changedText = {[weak self] (text) in
            guard let self = self else { return }
            if text.isEmpty {
                ProgressView.shared.hide()
                self.tableView?.isHidden = true
                return
            }
            ProgressView.shared.show()
            self.timer?.invalidate()
            self.timer = Timer.scheduledTimer(withTimeInterval: 2, repeats: false, block: { (_) in
                self.prepareForSearching(text: text)
            })
            
        }
        configureTable()
    }
    
    private func prepareForSearching(text: String) {
        
        hideNoData()
        listData.removeAll()
        self.keySearch = text
        self.offset = 0
        self.callAPI()
    }
    
    override func showNoData(text: String = LocalizableKey.lbNoData.showLanguage) {
        super.showNoData(text: LocalizableKey.noResultFound.showLanguage)
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        addBackToNavigation()
        setTitleNavigation(title: LocalizableKey.find.showLanguage)
    }
    
    func searchExercise(text: String) {
        self.presenter?.search(type: self.type, text: text, offset: self.offset)
    }
    
    override func btnBackTapped() {
        self.pop()
        self.dismissKeyBoard()
    }
        
    // MARK: For check read or not
    private func changeStatusRow(index: IndexPath) {
        (listData as! [TestResultProfileEntity])[index.row].isRead = true
        DispatchQueue.main.async {
            let cell = self.resultsTableView.cellForRow(at: index)
            cell?.backgroundColor = UIColor.white
        }
    }
    
    private func configureTable() {
        resultsTableView.registerXibFile(FindCell.self)
        resultsTableView.separatorStyle = .none
    }
    
    // MARK: - Call api
    override func callAPI() {
        super.callAPI()
        searchExercise(text: self.keySearch)
    }
    
    // MARK: - TableView
    override func cellForRowAt(item: Any, _ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(FindCell.self, for: indexPath)
        
        if type == .searchTheory {
            if let _item = item as? SearchEntity, let name = _item.nameString { cell.lbTitle.text = name }
        } else {
            if let _item = item as? TestResultProfileEntity {
                cell.backgroundColor = (_item.isRead == true ? (UIColor.white) : (AppColor.notificationNotRead))
                cell.lbTitle.text = _item.titleString
                cell.lbContent.text = _item.nameString
            }
        }
        return cell
    }
    
    override func didSelectedRowAt(item: Any, indexPath: IndexPath) {
        if type == .searchTheory {
            guard let item = item as? SearchEntity else { return }
            let idLesson = item._id ?? "0"
            self.presenter?.gotoTheoryDetail(idLesson: idLesson)
        }
        
        if type == .searchExercise {
            guard let exercise = item as? TestResultProfileEntity else { return }
            self.changeStatusRow(index: indexPath)
            let vc = FindDetailExerciseRouter.createModule(findDetail: exercise, isMinusMoney: exercise.isMinusMoney)
            vc.callbackMinusMoney = { [weak self] in
                if let self = self {
                    (self.listData as! [TestResultProfileEntity])[indexPath.row].isMinusMoney = true
                }
            }
            self.push(controller: vc)
            
        }
    }
    
}

// MARK: - FindViewProtocol's method
extension FindViewController: FindViewProtocol{
    func reloadView(data: [Any]) {
        initLoadData(data: data)
        
    }
    
    func showErrorSearchFailed() {
        PopUpHelper.shared.showUpdateFeature(completeUpdate: { [unowned self] in
            self.push(controller: StoreViewController())
            }, completeCancel: nil)
    }
}
