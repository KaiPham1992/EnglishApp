//
//  BXHViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 6/2/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class BXHViewController: BaseViewController {

	var presenter: BXHPresenterProtocol?
    @IBOutlet weak var tbBXH: UITableView!
    @IBOutlet weak var vUser: BXHView!
    @IBOutlet weak var lbRank: UILabel!
    @IBOutlet var btnOption: [UIButton]!
    @IBOutlet weak var viewOption: UIView!
    
    let arrayRank = ["BRONZE","SILVER","GOLD","PLATINUM","MASTER","TOAA",""]
    var index = 6
    
    var quarter = ""
    var year = ""
    var rank = ""
    
    var listLeaderBoard = LeaderBoardEntity(){
        didSet{
            tbBXH.reloadData()
        }
    }
    
	override func viewDidLoad() {
        super.viewDidLoad()
        presenter?.getListLeaderBoard(quarter: "", year: "", rank: "")
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        
        hideTabbar()
        addBackToNavigation()
        setTitleNavigation(title: LocalizableKey.bxh.showLanguage)
        addButtonToNavigation(image: AppImage.iconFilter, style: .right, action: #selector(btnFilterTapped))
    }
    override func setUpViews() {
        super.setUpViews()
        configureTable()
        configureViewOption()
        configureButtonOption()
        setUpLabelRank()
        let tapGesture = UITapGestureRecognizer(target: self, action: #selector(hideMenu))
        self.view.addGestureRecognizer(tapGesture)
    }
    
    func setUpLabelRank() {
        if arrayRank[index] == "" {
            lbRank.text = LocalizableKey.all.showLanguage
        } else if arrayRank[index] == "TOAA" {
            lbRank.text = "The one above all"
        } else {
            lbRank.text = arrayRank[index]
        }
        
    }

    func configureViewOption() {
        let shadowSize : CGFloat = 20.0
        let shadowPath = UIBezierPath(rect: CGRect(x: -shadowSize / 2,
                                                   y: -shadowSize / 2,
                                                   width: self.viewOption.frame.size.width + shadowSize,
                                                   height: self.viewOption.frame.size.height + shadowSize))
        self.viewOption.layer.masksToBounds = false
        self.viewOption.layer.shadowColor = UIColor.gray.cgColor
        self.viewOption.layer.shadowOffset = CGSize(width: 0.0, height: 0.0)
        self.viewOption.layer.shadowOpacity = 0.2
        self.viewOption.layer.shadowPath = shadowPath.cgPath
    }
    
    func configureButtonOption() {
        btnOption[0].setTitle("\(LocalizableKey.quater22019.showLanguage)", for: .normal)
        btnOption[1].setTitle("\(LocalizableKey.quater12019.showLanguage)", for: .normal)
        btnOption[2].setTitle("\(LocalizableKey.quater42018.showLanguage)", for: .normal)
        btnOption[3].setTitle("\(LocalizableKey.quater32018.showLanguage)", for: .normal)
        btnOption[4].setTitle("\(LocalizableKey.quater22018.showLanguage)", for: .normal)
        btnOption[5].setTitle("\(LocalizableKey.quater12018.showLanguage)", for: .normal)
    }
        
    override func btnBackTapped() {
        showTabbar()
        self.pop()
    }
    
    @objc func btnFilterTapped() {
//        UIView.animate(withDuration: 0.25, animations: {
//            self.viewOption.isHidden = !self.viewOption.isHidden
//        })
        UIView.transition(with: self.viewOption, duration: 0.25, options: .transitionCrossDissolve, animations: {
            self.viewOption.isHidden = !self.viewOption.isHidden
        })
    }
    
    @objc func hideMenu() {
        if self.viewOption.isHidden == false {
            btnFilterTapped()
        }
    }
    
    @IBAction func btnOptionTapped(_ sender: UIButton) {
        //-- hide menu
        hideMenu()
        
        //-- handle selection

        switch sender {
        case btnOption[0]:
            quarter = "2"
            year = "2019"
            setSelectedButton(index: 0)
        case btnOption[1]:
            quarter = "1"
            year = "2019"
            setSelectedButton(index: 1)
        case btnOption[2]:
            quarter = "4"
            year = "2018"
            setSelectedButton(index: 2)
        case btnOption[3]:
            quarter = "3"
            year = "2018"
            setSelectedButton(index: 3)
        case btnOption[4]:
            quarter = "2"
            year = "2018"
            setSelectedButton(index: 4)
        case btnOption[5]:
            quarter = "1"
            year = "2018"
            setSelectedButton(index: 5)
        default:
            break
        }
        presenter?.getListLeaderBoard(quarter: quarter, year: year, rank: rank)
    }
    
    func setSelectedButton(index: Int) {
        for i in 0 ... 5 {
            if i == index {
                btnOption[i].backgroundColor = UIColor.lightGray
            } else {
                btnOption[i].backgroundColor = .white
            }
            
        }
    }
    
    @IBAction func btnLeftTapped() {
        index += 1
        if index > 6 {
            index = 0
        }
        setUpLabelRank()
        self.rank = arrayRank[index]
        presenter?.getListLeaderBoard(quarter: quarter, year: year, rank: arrayRank[index])
    }
    
    @IBAction func btnRightTapped() {
        index -= 1
        if index < 0 {
            index = 6
        }
        setUpLabelRank()
        self.rank = arrayRank[index]
        presenter?.getListLeaderBoard(quarter: quarter, year: year, rank: arrayRank[index])
    }
    
}


extension BXHViewController: UITableViewDelegate, UITableViewDataSource {
    func configureTable() {
        tbBXH.delegate = self
        tbBXH.dataSource = self
        tbBXH.registerXibFile(BXHCell.self)
        tbBXH.registerXibFile(BXHTop3Cell.self)
        tbBXH.separatorStyle = .none
        
        tbBXH.estimatedRowHeight = 55
        tbBXH.rowHeight = UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        if indexPath.item == 0 {
            let cell = tableView.dequeue(BXHTop3Cell.self, for: indexPath)
            if let topThree = listLeaderBoard.boards{
                cell.viewTopThree.listTopThree = topThree
            }
            
            return cell
        }
        
        let cell = tableView.dequeue(BXHCell.self, for: indexPath)
        if let _listLeaderBoard = listLeaderBoard.boards{
            cell.viewBXH.number = indexPath.item + 3
            cell.viewBXH.user = _listLeaderBoard[indexPath.item + 2]
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        if listLeaderBoard.total ?? 0 <= 2 {
            return 1
        }
        return (listLeaderBoard.total ?? 0) - 2
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return indexPath.item == 0 ? 150: 78 
    }
}
extension BXHViewController: BXHViewProtocol{
    func didGetList(listLeaderBoard: LeaderBoardEntity) {
        tbBXH.isHidden = false
        hideNoData()
        self.listLeaderBoard = listLeaderBoard
        
        guard let user = listLeaderBoard.user else {return}
        self.vUser.user = user
    }
    
    func didGetList(error: Error) {
        print(error.localizedDescription)
        tbBXH.isHidden = true
        showNoData()
    }

}
