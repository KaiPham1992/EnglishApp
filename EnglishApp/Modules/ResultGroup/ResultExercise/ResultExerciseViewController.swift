//
//  ResultExerciseViewController.swift
//  EnglishApp
//
//  Created vinova on 6/25/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class ResultExerciseViewController: BaseViewController {
  

	var presenter: ResultExercisePresenterProtocol?
    
    @IBAction func reportQuestion(_ sender: Any) {
        PopUpHelper.shared.showReportQuestion(cancel: {
        }) { [unowned self] (message) in
            self.presenter?.reportQuestion(questionDetailId: Int(self.presenter?.getAnswer(indexPath: IndexPath(row: self.index, section: 0)).question_id ?? "0") ?? 0, content: message ?? "")
        }
    }
    
    @IBAction func clickNext(_ sender: Any) {
        let numberAnswer = self.presenter?.getNumberAnswer() ?? 0
        if index + 1 < numberAnswer {
            self.index += 1
            lblIndexQuestion.text = "\(index + 1)/\(numberAnswer) \(LocalizableKey.sentence.showLanguage.lowercased())"
            self.clvQuestion.scrollToItem(at: IndexPath(row: self.index, section: 0), at: UICollectionView.ScrollPosition.right, animated: true)
            if index + 1 == (self.presenter?.getNumberAnswer() ?? 0) {
                btnNext.setTitle(LocalizableKey.time_end.showLanguage.uppercased(), for: .normal)
            }
        } else {
            self.pop(animated: true)
        }
    }
    
    @IBOutlet weak var btnNext: UIButton!
    @IBOutlet weak var lblIndexQuestion: UILabel!
    @IBOutlet weak var clvQuestion: UICollectionView!
    var index: Int = 0
    var tempIndex = 0
    var isHistory = false
    var isSearch = false
    var isMinusMoney = false

    override func setUpViews() {
        super.setUpViews()
        
        self.tempIndex = index
        clvQuestion.registerXibCell(CellResultExercise.self)
        clvQuestion.delegate = self
        clvQuestion.dataSource = self
        btnNext.setTitle(LocalizableKey.next.showLanguage.uppercased(), for: .normal)
        if isSearch {
            btnNext.isHidden = true
            
        } else {
            btnNext.isHidden = false
        }
        lblIndexQuestion.text = "\(index + 1)/\(self.presenter?.getNumberAnswer() ?? 0) \(LocalizableKey.sentence.showLanguage.lowercased())"
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
            self.clvQuestion.scrollToItem(at: IndexPath(row: self.index, section: 0), at: UICollectionView.ScrollPosition.right, animated: true)
            if self.index + 1 == (self.presenter?.getNumberAnswer() ?? 0) {
                self.btnNext.setTitle(LocalizableKey.time_end.showLanguage.uppercased(), for: .normal)
            }
        }
    }
    
    override func btnBackTapped() {
//        back to font question
        if self.index != tempIndex {
            let numberAnswer = self.presenter?.getNumberAnswer() ?? 0
            if index != 0 && tempIndex + 1 != numberAnswer {
                self.index -= 1
                lblIndexQuestion.text = "\(index + 1)/\(self.presenter?.getNumberAnswer() ?? 0) \(LocalizableKey.sentence.showLanguage.lowercased())"
                self.clvQuestion.scrollToItem(at: IndexPath(row: self.index, section: 0), at: UICollectionView.ScrollPosition.left, animated: true)
                btnNext.setTitle(LocalizableKey.next.showLanguage.uppercased(), for: .normal)
            } else {
                super.btnBackTapped()
            }
        } else {
            super.btnBackTapped()
        }
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        setTitleNavigation(title: LocalizableKey.result_competion.showLanguage)
        addBackToNavigation()
        if !isSearch {
            addButtonToNavigation(image: UIImage(named:"Material_Icons_white_chevron_left_Copy") ?? UIImage(), style: .right, action: #selector(deleteExercise))
        }
    }
    
    @objc func deleteExercise(){
        PopUpHelper.shared.showComfirmPopUp(message: LocalizableKey.confirm_back_result.showLanguage, titleYes: LocalizableKey.confirm.showLanguage, titleNo: LocalizableKey.cancel.showLanguage.uppercased(), complete: {
            self.pop(animated: true)
        })
    }
}
extension ResultExerciseViewController : UICollectionViewDelegate{
    
}

extension ResultExerciseViewController : UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.00009
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: self.clvQuestion.frame.width, height: self.clvQuestion.frame.height)
    }
}
extension ResultExerciseViewController: UICollectionViewDataSource{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
        return self.presenter?.getNumberAnswer() ?? 0
    }
    
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        let cell = collectionView.dequeueCell(CellResultExercise.self, indexPath: indexPath)
        cell.indexPath = indexPath
        cell.delegate = self
        
        cell.callbackShowPopup = {[weak self] (fromView: UIView, point: CGPoint, word: WordExplainEntity) in
            let pointConvert = fromView.convert(point, to: self?.view ?? UIView())
            self?.showPopoverVocabulary(x: pointConvert.x, y: pointConvert.y, size: CGSize.zero, word: word)
        }
        
        cell.actionExplainExericse = {[weak self] (questionId) in
            self?.explainQuestion(questionId: questionId)
        }
        
        cell.actionRelatedGrammar = {[weak self] (questionId) in
            self?.seeRelatedGrammar(questionId: questionId)
        }
        
        if let dataCell = self.presenter?.getAnswer(indexPath: indexPath){
            cell.questionEntity = dataCell
        }
        return cell
    }

    func seeRelatedGrammar(questionId: Int) {
        if isSearch && !isMinusMoney {
            self.minusMoney(callback: { [weak self] (isSuccessed: Bool) in
                if isSuccessed {
                    self?.isMinusMoney = true
                    let vc = ExplainExerciseGroupRouter.createModule(id: questionId)
                    self?.push(controller: vc)
                } else {
                    PopUpHelper.shared.showYesNo(message: LocalizableKey.honey_diamond_not_enough.showLanguage, completionNo: nil) { [unowned self] in
                        let controller = StoreViewController()
                        self?.push(controller: controller)
                    }
                }
            })
            return
        }
        let vc = RelatedGrammarRouter.createModule(id: questionId)
        self.push(controller: vc)
    }
    
    func explainQuestion(questionId: Int) {
        self.gotoExplainQuestion(questionId: questionId)
    }
    
    func gotoExplainQuestion(questionId: Int) {
        guard let isUserPremium = UserDefaultHelper.shared.loginUserInfo?.isUserPremium else { return }
        if isUserPremium {
            if isSearch && !isMinusMoney {
                self.minusMoney(callback: { [weak self] (isSuccessed: Bool) in
                    if isSuccessed {
                        self?.isMinusMoney = true
                        let vc = ExplainExerciseGroupRouter.createModule(id: questionId)
                        self?.push(controller: vc)
                    } else {
                        PopUpHelper.shared.showYesNo(message: LocalizableKey.honey_diamond_not_enough.showLanguage, completionNo: nil) { [unowned self] in
                            let controller = StoreViewController()
                            self?.push(controller: controller)
                        }
                    }
                })
                return
            }
            let vc = ExplainExerciseGroupRouter.createModule(id: questionId)
            self.push(controller: vc)
        } else {
            PopUpHelper.shared.showUpdateFeature(completeUpdate: {[unowned self] in
                let vc = StudyPackDetailRouter.createModule(id: "-1")
                self.push(controller: vc)
            }) {
                
            }
        }
    }
}

extension ResultExerciseViewController: ResultExerciseViewProtocol {
    
    func reportQuestionSuccessed() {
        PopUpHelper.shared.showThanks(completionYes: {
            
        })
    }
    func searchVocabularySuccessed(wordEntity: WordExplainEntity, position: CGPoint,index: IndexPath) {
        if let cell = self.clvQuestion.cellForItem(at: index) as? CellResultExercise{
            cell.setupPopOver(x: position.x, y: position.y, word: wordEntity)
        }
    }
    
    private func minusMoney(callback: @escaping (_ isSuccessed: Bool) -> ()) {
        let numberDiamond = UserDefaultHelper.shared.loginUserInfo?.amountDiamond ?? 0
        let numberHoney = UserDefaultHelper.shared.loginUserInfo?.amountHoney ?? 0
        if numberHoney < 5 && numberDiamond < 50 {
            PopUpHelper.shared.showYesNo(message: LocalizableKey.honey_diamond_not_enough.showLanguage, completionNo: nil) { [unowned self] in
                let controller = StoreViewController()
                self.push(controller: controller)
            }
        } else {
            PopUpHelper.shared.showYesNo(message: LocalizableKey.feeFind.showLanguage, completionNo: nil) {
                [unowned self] in
                self.presenter?.checkAmountSearchExercise(callback: callback)
            }
        }
    }
}

extension ResultExerciseViewController : CellExerciseDelegate {
    
    func changeAnswer(idAnswer: Int?, valueAnswer: String?, indexPathRow: IndexPath, indexPath: IndexPath) {
        
    }
    
    func showDetailVocubulary(word: WordExplainEntity) {
        if isSearch && !isMinusMoney {
            self.minusMoney(callback: { [weak self] (isSuccessed: Bool) in
                if isSuccessed {
                    self?.isMinusMoney = true
                    self?.presenter?.gotoDetailVocabulary(idWord: word.id)
                } else {
                    PopUpHelper.shared.showYesNo(message: LocalizableKey.honey_diamond_not_enough.showLanguage, completionNo: nil) { [unowned self] in
                        let controller = StoreViewController()
                        self?.push(controller: controller)
                    }
                }
            })
            return
        }
        self.presenter?.gotoDetailVocabulary(idWord: word.id)
    }
    
    func suggestQuestion(id: String, indexPath: IndexPath, indexQuestion: IndexPath) {
        
    }
    //use for exercise -> result dont use
    func searchVocabulary(word: String, position: CGPoint, index: IndexPath) {
        self.presenter?.searchVocabulary(word: word, position: position, index: index)
    }
    
    func clickAudio(indexPath: IndexPath) {
        
    }
}
