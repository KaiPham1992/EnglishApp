//
//  CommentQuestionPresenter.swift
//  EnglishApp
//
//  Created Steve on 8/3/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CommentQuestionPresenter: CommentQuestionPresenterProtocol, CommentQuestionInteractorOutputProtocol {

    weak private var view: CommentQuestionViewProtocol?
    var interactor: CommentQuestionInteractorInputProtocol?
    private let router: CommentQuestionWireframeProtocol
    
    var commentEntity: CommentEntity?
    var indexSection: Int?
    var isLoadmore = true

    init(interface: CommentQuestionViewProtocol, interactor: CommentQuestionInteractorInputProtocol?, router: CommentQuestionWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func getComment(idLesson: String,offset: Int) {
        if isLoadmore {
            self.interactor?.getComment(idLesson: idLesson,offset: offset)
        }
        
    }
    
    func addCommentSuccessed(respone: ParentComment) {
        if commentEntity == nil {
            commentEntity = CommentEntity()
            commentEntity?.data.append(respone)
        } else {
            if let _index = self.indexSection {
                self.commentEntity?.data[_index].children.append(respone)
                self.indexSection = nil
            } else {
                self.commentEntity?.data.append(respone)
                self.indexSection = nil
            }
        }
        self.view?.reloadView()
    }
    
    func getCommentSuccessed(respone: CommentEntity) {
        if respone.data.count < limit {
            isLoadmore = false
        }
        if commentEntity == nil {
            self.commentEntity = respone
        } else {
            self.commentEntity?.data += respone.data
        }
        
        self.view?.reloadView()
    }
    
    func numberParent() -> Int?{
        return commentEntity?.data.count
    }
    
    func numberChildren(section: Int) -> Int?{
        return commentEntity?.data[section].children.count
    }
    
    func getParentComment(section: Int) -> ParentComment?{
        return commentEntity?.data[section]
    }
    
    func getChildrenComment(indexPath: IndexPath) -> ParentComment? {
        return commentEntity?.data[indexPath.section].children[indexPath.row]
    }
    
    func addComment(idLesson: Int, content: String,idParent: Int?,indexSection: Int?) {
        self.indexSection = indexSection
        self.interactor?.addComment(idLesson: idLesson, content: content,idParent: idParent)
    }

}
