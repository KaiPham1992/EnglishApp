//
//  NameExerciseProtocols.swift
//  EnglishApp
//
//  Created vinova on 5/23/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import Foundation
import UIKit

//MARK: Wireframe -
protocol NameExerciseWireframeProtocol: class {
    func gotoDetailVocabulary(word: WordExplainEntity)
    func gotoResult(result: TestResultProfileEntity,type: TypeDoExercise, isOut: Bool)
}
//MARK: Presenter -
protocol NameExercisePresenterProtocol: class {

    var interactor: NameExerciseInteractorInputProtocol? { get set }
    var type : TypeDoExercise {get set}
    var exerciseEntity: ViewExerciseEntity? {get set}
    var error: APIError? {get set}
    
    func gotoDetailVocabulary(word: WordExplainEntity)
    func getViewExercise(id: String)
    func getViewEntranceTest()
    func getTime(index: Int) -> Int?
    func getQuestion(indexPath: IndexPath) -> QuestionEntity?
    func submitExercise(param: SubmitExerciseParam, isOut: Bool)
    func getDailyMisson()
    func exitExercise(id : Int)
    func suggestQuestion(id: String, indexPath: IndexPath, indexQuestion: IndexPath,isDiamond: Bool)
    func searchVocabulary(word: String,position: CGPoint,index: IndexPath)
    
}

//MARK: Interactor -
protocol NameExerciseInteractorOutputProtocol: class {

    /* Interactor -> Presenter */
    func getExerciseSuccessed(respone: ViewExerciseEntity)
    func gotoResult(result: TestResultProfileEntity)
    func getExerciseFailed(error:APIError)
    func exitSuccessed(respone: TestResultProfileEntity)
    func suggestQuestionSuccessed(respone: [String])
    func suggestQuestionError(error: APIError)
    func searchVocabularySuccessed(wordEntity: WordExplainEntity,position: CGPoint,index: IndexPath)
}

protocol NameExerciseInteractorInputProtocol: class {

    var presenter: NameExerciseInteractorOutputProtocol?  { get set }
    func getViewExercise(id: String)
    func getViewEntranceTest()
    func submitExercise(param: SubmitExerciseParam)
    func getDailyMisson()
    func exitExercise(id : Int)
    func suggestQuestion(id: String,isDiamond: Bool)
    func searchVocabulary(word: String,position: CGPoint,index: IndexPath)

    /* Presenter -> Interactor */
}

//MARK: View -
protocol NameExerciseViewProtocol: class {

    var presenter: NameExercisePresenterProtocol?  { get set }

    /* Presenter -> ViewController */
    func reloadView()
    func getExerciseFailed(error:APIError)
    func exitSuccessed()
    func suggesQuestionSuccessed(indexPath: IndexPath, indexQuestion: IndexPath)
    func suggestQuestionError()
    func searchVocabularySuccessed(wordEntity: WordExplainEntity,position: CGPoint,index: IndexPath)
}
