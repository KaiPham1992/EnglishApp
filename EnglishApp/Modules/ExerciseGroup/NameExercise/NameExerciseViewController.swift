//
//  NameExerciseViewController.swift
//  EnglishApp
//
//  Created vinova on 5/23/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import Popover


class NameExerciseViewController: BaseViewController {

	var presenter: NameExercisePresenterProtocol?

    @IBAction func clickNext(_ sender: Any) {
        arrTime[self.currentIndex - 1] = vCountTime.getCurrentTime()
        vCountTime.stopTimer()
        if self.currentIndex + 1 > numberQuestion {
            self.presenter?.gotoResult()
        } else {
            self.currentIndex += 1
            lblIndexQuestion.text = "\(self.currentIndex)/\(numberQuestion)"
            clvQuestion.scrollToItem(at: IndexPath(row: self.currentIndex - 1, section: 0), at: .right, animated: false)
            vCountTime.setupTimeStartNow(min: arrTime[self.currentIndex - 1])
        }
    }
    
    var numberQuestion : Int = 0
    
    @IBOutlet weak var btnNext: UIButton!
    @IBOutlet weak var lblIndexQuestion: UILabel!
    @IBOutlet weak var clvQuestion: UICollectionView!
    @IBOutlet weak var vCountTime: ViewTime!
    
    var arrTime : [Int] = []
    var currentIndex = 1 {
        didSet{
            if self.currentIndex == numberQuestion {
                btnNext.setTitle(LocalizableKey.time_end.showLanguage, for: .normal)
            } else {
                btnNext.setTitle(LocalizableKey.next.showLanguage.uppercased(), for: .normal)
            }
        }
    }
    
    var isEnd : Bool = false{
        didSet {
            self.arrTime[self.currentIndex] = 0
            vCountTime.stopTimer()
            if self.currentIndex < numberQuestion {
                self.currentIndex += 1
                lblIndexQuestion.text = "\(self.currentIndex)/\(numberQuestion)"
                clvQuestion.scrollToItem(at: IndexPath(row: self.currentIndex - 1, section: 0), at: .right, animated: false)
                vCountTime.setupTimeStartNow(min: arrTime[self.currentIndex - 1])
            } else {
                self.presenter?.gotoResult()
            }
        }
    }
    
    override func setUpViews() {
        super.setUpViews()
        clvQuestion.isHidden = true
        btnNext.setTitle(LocalizableKey.next.showLanguage.uppercased(), for: .normal)
        clvQuestion.registerXibCell(CellFillExercise.self)
        clvQuestion.registerXibCell(CellExercise.self)
        clvQuestion.delegate = self
        clvQuestion.dataSource = self
        vCountTime.delegate = self
        self.presenter?.getViewEntranceTest()
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        self.tabBarController?.tabBar.isHidden = true
        setTitleNavigation(title: LocalizableKey.level_exercise.showLanguage)
        addBackToNavigation()
        addButtonToNavigation(image: UIImage(named:"Material_Icons_white_chevron_left_Copy") ?? UIImage(), style: .right, action: #selector(deleteExercise))
    }
    
    @objc func deleteExercise(){
        PopUpHelper.shared.showComfirmPopUp(message: LocalizableKey.popleaveHomeWork.showLanguage, titleYes: LocalizableKey.confirm.showLanguage, titleNo: LocalizableKey.cancel.showLanguage, complete: {
            self.pop(animated: true)
        })
    }
    
    override func btnBackTapped() {
        if self.currentIndex == 1 {
            PopUpHelper.shared.showComfirmPopUp(message: LocalizableKey.popleaveHomeWork.showLanguage, titleYes: LocalizableKey.confirm.showLanguage, titleNo: LocalizableKey.cancel.showLanguage, complete: {
                self.pop(animated: true)
            })
        } else {
            arrTime[self.currentIndex-1] = vCountTime.getCurrentTime()
            vCountTime.stopTimer()
            self.currentIndex -= 1
            lblIndexQuestion.text = "\(self.currentIndex)/\(numberQuestion)"
            clvQuestion.scrollToItem(at: IndexPath(row: self.currentIndex - 1, section: 0), at: .left, animated: false)
            vCountTime.setupTimeStartNow(min: arrTime[self.currentIndex-1])
        }
    }
}

extension NameExerciseViewController :NameExerciseViewProtocol{
    func reloadView() {
        self.numberQuestion = self.presenter?.getNumber() ?? 0
        self.arrTime = self.presenter?.getAllTime() ?? []
        lblIndexQuestion.text = "1/\(numberQuestion)"
        vCountTime.setupTime(min: self.arrTime[0])
        clvQuestion.reloadData()
    }
}
extension NameExerciseViewController : UICollectionViewDelegate{
    
}
extension NameExerciseViewController : UICollectionViewDelegateFlowLayout{
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Int) -> CGFloat {
        return 0.00009
    }
    
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, minimumLineSpacingForSectionAt section: Int) -> CGFloat {
        return 0
    }
    func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
        return CGSize(width: self.clvQuestion.frame.width, height: self.clvQuestion.frame.height)
    }
}
extension NameExerciseViewController: UICollectionViewDataSource{
    func numberOfSections(in collectionView: UICollectionView) -> Int {
        return 1
    }
    func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
         return self.presenter?.getNumber() ?? 0
    }
    func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
        if let data = self.presenter?.getQuestion(indexPath: indexPath){
            let type = data.answers?.first?.type ?? ""
            if type == "" || type == "2"{
                let cell =  collectionView.dequeueCell(CellFillExercise.self, indexPath: indexPath)
                cell.setupCell(data: data)
                return cell
            }
            let cell = collectionView.dequeueCell(CellExercise.self, indexPath: indexPath)
            cell.setupCell(dataCell: data)
            return cell
        }
        return UICollectionViewCell()
    }
}

extension NameExerciseViewController : CellExerciseDelegate{
    func showMoreResulr(result: String) {
        PopUpHelper.shared.showMorePopUp(content: result)
    }
    
    func showMoreQuestion(attributed: NSMutableAttributedString) {
        PopUpHelper.shared.showMorePopUpAttributed(attributed: attributed) { (text) in
            self.presenter?.gotoDetailVocabulary()
        }
    }
    func showDetailVocubulary(text: String) {
        self.presenter?.gotoDetailVocabulary()
    }
}

extension NameExerciseViewController : TimeDelegate{
    func startTime() {
        btnNext.isUserInteractionEnabled = true
        clvQuestion.isHidden = false
    }
    
    func endTime() {
        self.isEnd = true
    }
}
