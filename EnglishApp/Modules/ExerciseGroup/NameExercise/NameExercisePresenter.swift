//
//  NameExercisePresenter.swift
//  EnglishApp
//
//  Created vinova on 5/23/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class NameExercisePresenter: NameExercisePresenterProtocol, NameExerciseInteractorOutputProtocol {
   
    weak private var view: NameExerciseViewProtocol?
    var interactor: NameExerciseInteractorInputProtocol?
    private let router: NameExerciseWireframeProtocol
    var exerciseEntity: ViewExerciseEntity?

    init(interface: NameExerciseViewProtocol, interactor: NameExerciseInteractorInputProtocol?, router: NameExerciseWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    
    func gotoDetailVocabulary() {
        self.router.gotoDetailVocabulary()
    }
    
    func getNumber() -> Int? {
        return exerciseEntity?.questions?.count
    }
    
    func getIDExercise() -> Int?{
        return Int(exerciseEntity?._id ?? "0")
    }
    
    func getAllTime() -> [Int]? {
        return exerciseEntity?.questions?.map{$0.question_time}.compactMap{Int($0 ?? "0")}
    }
    
    func submitExercise(param: SubmitExerciseParam) {
        self.interactor?.submitExercise(param: param)
    }
    
    func getTotalTime() -> Int?{
        return exerciseEntity?.total_times
    }
    
    func gotoResult(result: TestResultProfileEntity) {
        self.router.gotoResult(result: result)
    }
    
    func getAllIdAndTimeQuestion() -> [(Int,Int)]?{
        return exerciseEntity?.questions?.map{(Int($0._id ?? "0") ?? 0,Int($0.question_time ?? "0") ?? 0)}
    }
    
    func getTime(index: Int) -> Int? {
        return Int(exerciseEntity?.questions?[index].question_time ?? "0")
    }
    
    func getQuestion(indexPath: IndexPath) -> QuestionEntity? {
        return exerciseEntity?.questions?[indexPath.row]
    }
    
    func getViewExercise() {
        
    }
    
    func getViewEntranceTest() {
        if exerciseEntity == nil {
            self.interactor?.getViewEntranceTest()
        } else {
            self.view?.reloadView()
        }
    }
    
    func getExerciseSuccessed(respone: ViewExerciseEntity) {
        self.exerciseEntity = respone
        self.view?.reloadView()
    }
    

}
