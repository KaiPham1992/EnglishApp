//
//  NameExerciseRouter.swift
//  EnglishApp
//
//  Created vinova on 5/23/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class NameExerciseRouter: NameExerciseWireframeProtocol {

    weak var viewController: UIViewController?

    static func createModule() -> NameExerciseViewController {
        // Change to get view from storyboard if not using progammatic UI
        let view = NameExerciseViewController.initFromNib()
        let interactor = NameExerciseInteractor()
        let router = NameExerciseRouter()
        let presenter = NameExercisePresenter(interface: view, interactor: interactor, router: router)

        view.presenter = presenter
        interactor.presenter = presenter
        router.viewController = view

        return view
    }
    
    static func createModule(viewExerciseEntity: ViewExerciseEntity) -> NameExerciseViewController {
        // Change to get view from storyboard if not using progammatic UI
        let view = NameExerciseViewController.initFromNib()
        let interactor = NameExerciseInteractor()
        let router = NameExerciseRouter()
        let presenter = NameExercisePresenter(interface: view, interactor: interactor, router: router)
        presenter.exerciseEntity = viewExerciseEntity
        
        view.presenter = presenter
        interactor.presenter = presenter
        router.viewController = view
        
        return view
    }
    
    static func createModule(id: String,type: TypeDoExercise) -> NameExerciseViewController {
        // Change to get view from storyboard if not using progammatic UI
        let view = NameExerciseViewController.initFromNib()
        view.idExercise = id
        view.typeExercise = type
        let interactor = NameExerciseInteractor()
        let router = NameExerciseRouter()
        let presenter = NameExercisePresenter(interface: view, interactor: interactor, router: router)
        
        view.presenter = presenter
        interactor.presenter = presenter
        router.viewController = view
        
        return view
    }
    
    static func createModule(type: TypeDoExercise) -> NameExerciseViewController {
        // Change to get view from storyboard if not using progammatic UI
        let view = NameExerciseViewController.initFromNib()
        view.typeExercise = type
        let interactor = NameExerciseInteractor()
        let router = NameExerciseRouter()
        let presenter = NameExercisePresenter(interface: view, interactor: interactor, router: router)
        
        view.presenter = presenter
        interactor.presenter = presenter
        router.viewController = view
        
        return view
    }
    
    
    func gotoDetailVocabulary(word: WordExplainEntity){
        let vc = DetailLessonRouter.createModule(word: word)
        self.viewController?.push(controller: vc,animated: true)
    }
    
    func gotoResult(result: TestResultProfileEntity,type: TypeDoExercise) {
        let vc = ResultRouter.createModule(type: type, result: result)
        if type == .entranceExercise {
            let infor = UserDefaultHelper.shared.loginUserInfo
            if let _infor = infor {
                _infor.is_entrance_test = "1"
                UserDefaultHelper.shared.loginUserInfo = _infor
            }
        }
        self.viewController?.push(controller: vc,animated: true)
    }

}
