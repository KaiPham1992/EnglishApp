//
//  CatelogyExercisePresenter.swift
//  EnglishApp
//
//  Created Steve on 7/18/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CatelogyExercisePresenter: CatelogyExercisePresenterProtocol, CatelogyExerciseInteractorOutputProtocol {

    weak private var view: CatelogyExerciseViewProtocol?
    var interactor: CatelogyExerciseInteractorInputProtocol?
    private let router: CatelogyExerciseWireframeProtocol
    var catelogy: CatelogyEntity?

    init(interface: CatelogyExerciseViewProtocol, interactor: CatelogyExerciseInteractorInputProtocol?, router: CatelogyExerciseWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func getListCatelogy() {
        self.interactor?.getListCatelogy()
    }
    
    func gotoChoiceExercise(type: Int, categoryId: String,studyPackId: Int) {
        self.router.gotoChoiceExercise(type: type, categoryId: categoryId,studyPackId: studyPackId)
    }

    
    func getListCatelogySuccessed(respone: CatelogyEntity) {
        self.catelogy = respone
        self.view?.reloadView()
    }


}
