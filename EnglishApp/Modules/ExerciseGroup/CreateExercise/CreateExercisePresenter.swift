//
//  CreateExercisePresenter.swift
//  EnglishApp
//
//  Created vinova on 5/22/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CreateExercisePresenter: CreateExercisePresenterProtocol, CreateExerciseInteractorOutputProtocol {

    weak private var view: CreateExerciseViewProtocol?
    var interactor: CreateExerciseInteractorInputProtocol?
    private let router: CreateExerciseWireframeProtocol

    var listCatelogyExercise: [SearchEntity] = []
    var listCateloriesParam : [CategoryParam] = []
    
    func getNumberRow() -> Int {
        return listCatelogyExercise.count
    }
    
    func getItemIndexPath(indexPath : IndexPath)->String{
        return listCatelogyExercise.map{$0.name}.compactMap{$0}[indexPath.row]
    }
    
    init(interface: CreateExerciseViewProtocol, interactor: CreateExerciseInteractorInputProtocol?, router: CreateExerciseWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func getCateloriesParam() -> [CategoryParam] {
        return self.listCateloriesParam
    }
    
    func changeLevelParam(indexPath: IndexPath,level: Int) {
        self.listCateloriesParam[indexPath.row].level = level
    }
    
    func changeNumberQuestion(indexPath: IndexPath,number: Int){
        self.listCateloriesParam[indexPath.row].number_of_question = number
    }
    
    func gotoChoiceExercise() {
        self.router.gotoChoiceExercise()
    }
    func gotoExercise() {
        self.router.gotoExercise()
    }
    
    func getListCatelogy() {
        self.interactor?.getListCatelogy()
    }
    
    func getListCatelogySuccessed(respone: [SearchEntity]) {
        self.listCatelogyExercise = respone
        self.listCateloriesParam = respone.map{CategoryParam(categ_id: Int($0._id&) ?? 0)}
        self.view?.reloadView()
    }
    func gotoCreateExercise(param: CreateExerciseParam) {
        self.interactor?.gotoCreateExercise(param: param)
    }
    
    
    func createExerciseSuccessed(respone: ViewExerciseEntity) {
        self.router.gotoExercise(viewExerciseEntity: respone)
    }
}
