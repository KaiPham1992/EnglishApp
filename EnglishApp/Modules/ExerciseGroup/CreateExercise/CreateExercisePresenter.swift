//
//  CreateExercisePresenter.swift
//  EnglishApp
//
//  Created vinova on 5/22/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class CreateExercisePresenter: CreateExercisePresenterProtocol, CreateExerciseInteractorOutputProtocol {
   

    weak private var view: CreateExerciseViewProtocol?
    var interactor: CreateExerciseInteractorInputProtocol?
    private let router: CreateExerciseWireframeProtocol

    var listCatelogyExercise: [SearchEntity] = []
    var createExerciseParam : CreateExerciseParam = CreateExerciseParam()
    var offset: Int = 0
    var isLoadmore = true
    
    func getNumberRow() -> Int {
        return listCatelogyExercise.count
    }
    
    func getItemIndexPath(indexPath : IndexPath)-> SearchEntity {
        return listCatelogyExercise[indexPath.row]
    }
    
    init(interface: CreateExerciseViewProtocol, interactor: CreateExerciseInteractorInputProtocol?, router: CreateExerciseWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func changeLevelParam(indexPath: IndexPath,level: Int) {
        self.createExerciseParam.categories[indexPath.row].level = level
        var type = ""
        if level == 1 {
            type = "Elementary"
        }
        if level == 2 {
            type = "Intermediate"
        }
        if level == 3 {
            type = "Advanced"
        }
        self.listCatelogyExercise[indexPath.row].typeCreateExercise = type
    }
    
    func changeNumberQuestion(indexPath: IndexPath,number: Int){
        self.createExerciseParam.categories[indexPath.row].number_of_question = number
        self.listCatelogyExercise[indexPath.row].numberQuestion = number
        let sum = self.createExerciseParam.categories.map{$0.number_of_question}.compactMap{$0}.getSum()
        self.view?.updateView(enableSubmit: checkEnableButtonSubmit())
        self.view?.showSumQuestion(sum: sum)
    }
    
    func changeNameExercise(name: String) {
        self.createExerciseParam.name = name
        self.view?.updateView(enableSubmit: checkEnableButtonSubmit())
    }
    
    private func checkEnableButtonSubmit() -> Bool {
        if (createExerciseParam.name.trimmingCharacters(in: .whitespacesAndNewlines) != "") && (self.createExerciseParam.categories.map{$0.number_of_question}.compactMap{$0}.getSum() > 0){
            return true
        }
        return false
    }
    
    func getListQuestionCatelogy(offset: Int) {
        self.offset = offset
        if isLoadmore {
            self.interactor?.getListQuestionCatelogy(offset: offset)
        }
    }
    
    func getListCatelogySuccessed(respone: [SearchEntity]) {
        if respone.count < limit {
            isLoadmore = false
        }
        self.listCatelogyExercise += respone
        self.createExerciseParam.categories += respone.map{CategoryParam(categ_id: Int($0._id&) ?? 0)}
        self.view?.reloadView()
    }
    func gotoCreateExercise(param: CreateExerciseParam) {
        self.interactor?.gotoCreateExercise(param: param)
    }
    
    
    func createExerciseSuccessed(respone: ViewExerciseEntity) {
        self.router.gotoExercise(viewExerciseEntity: respone)
    }
    
    func upgradeAccount() {
        self.view?.upgradeAccount()
    }
    
    func gotoStore() {
        self.router.gotoStore()
    }
}

typealias Integer = (Int)
extension Array where Element == Integer {
    func getSum() -> Integer {
        var sum : Integer = 0
        for item in self {
            sum += item
        }
        return sum
    }
}
