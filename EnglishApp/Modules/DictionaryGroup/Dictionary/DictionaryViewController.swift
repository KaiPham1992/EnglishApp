//
//  DictionaryViewController.swift
//  EnglishApp
//
//  Created vinova on 5/15/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import DropDown

class DictionaryViewController: BaseViewController {

    @IBOutlet weak var btnSetting: UIButton!
    @IBAction func gotoSetting(_ sender: Any) {
        let vc = MoreDictionaryRouter.createModule()
        vc.callBackChangeDictionary = { [weak self] in
            self?.setupViewDictionary()
        }
        self.push(controller: vc,animated: true)
    }

    @IBAction func textChanged(_ sender: Any) {
        let text = tfSearch.text ?? ""
        currentTextSearch = text
        if idDictionary != 0 && text != "" {
            if !isConnection {
               self.presenter?.searchVocabulary(text: currentTextSearch)
            }
        }
    }
    
    @IBOutlet weak var lblSearch: UILabel!
    @IBOutlet weak var imgPolygon: UIImageView!
    @IBOutlet weak var lblDictionary: UILabel!
    @IBOutlet weak var viewDictionary: UIView!
    @IBOutlet weak var tfSearch: TextFieldBee!
    
    @IBOutlet weak var heightViewNoDictionary: NSLayoutConstraint!
    @IBOutlet weak var lblTextSearch: UILabel!
//    var currentIdSearch = 0
    var currentTextSearch = ""
    @IBAction func searchVocabulary(_ sender: Any) {
//        let text = tfSearch.text ?? ""
        if currentTextSearch != "" {
            if !isConnection {
                self.presenter?.getDetailWord(text: currentTextSearch)
            } else {
                self.presenter?.lookWordOnline(dictionary_id: idDictionary, word: currentTextSearch)
            }
            self.view.endEditing(true)
        }
    }
    
    let id_user = Int(UserDefaultHelper.shared.loginUserInfo?.id ?? "0") ?? 0
    
    var presenter: DictionaryPresenterProtocol?
    let dropDownDictionary = DropDown()
    let dropDownSearch = DropDown()
    var idDictionary: Int = 0
    var listDictionary : [LocalConfigDictionary] = []

    @IBAction func clickDictionary(_ sender: Any) {
        if dropDownDictionary.isHidden {
            self.rotateImage()
            dropDownDictionary.show()
        }
    }
    
    override func setUpViews() {
        super.setUpViews()
//        self.presenter?.getListDictionary()
        lblSearch.text = LocalizableKey.search.showLanguage
        btnSetting.setTitle(LocalizableKey.setting.showLanguage.uppercased(), for: .normal)
//        lblDictionary.text = LocalizableKey.vietnamese_to_english.showLanguage
        self.setupViewDictionary()
        DispatchQueue.main.asyncAfter(deadline: .now()+0.2) {
            self.setupDropDown()
        }
    }
    
    func setupViewDictionary() {
//        self.listDictionary = RealmDBManager.share.getDataFromRealm(type: LocalConfigDictionary.self)
        
        self.listDictionary = RealmDBManager.share.filter(objectType: LocalConfigDictionary.self, key: "id_user", value: id_user)
        if listDictionary.count > 0 {
            heightViewNoDictionary.constant = 0
            showNoData()
        } else {
            heightViewNoDictionary.constant = self.view.frame.height
            hideNoData()
        }
        if let defaultValue = listDictionary.filter({$0.isDefault == 1}).first{
            lblDictionary.text = defaultValue.name
            idDictionary = defaultValue.id_dictionary
        } else {
            lblDictionary.text = ""
            idDictionary = 0
        }
        self.dropDownDictionary.dataSource = self.listDictionary.map{$0.name}
    }

    override func setUpNavigation() {
        super.setUpNavigation()
        addBackToNavigation()
        setTitleNavigation(title: LocalizableKey.dictionaty.showLanguage)
        addButtonToNavigation(image: UIImage(named: "ic_settings")!, style: .right, action: #selector(clickButtonRight) )
    }
    
    @objc func clickButtonRight(){
        let vc = MoreDictionaryRouter.createModule()
        vc.callBackChangeDictionary = { [weak self] in
            self?.setupViewDictionary()
        }
        self.push(controller: vc,animated: true)
    }
    
    func setupDropDown(){
        //dropdownDictionary
        dropDownDictionary.anchorView = self.viewDictionary
        dropDownDictionary.backgroundColor = UIColor(red: 32/255, green: 181/255, blue: 85/255, alpha: 1)
//        dropDownDictionary.backgroundColor = UIColor.white
        dropDownDictionary.selectionBackgroundColor = .clear
        dropDownDictionary.textColor = .white
        dropDownDictionary.selectedTextColor = .white
        dropDownDictionary.width = 150
        dropDownDictionary.bottomOffset = CGPoint(x: 0, y: (viewDictionary.frame.height))
        dropDownDictionary.setupCornerRadius(0)
        dropDownDictionary.cellNib = UINib(nibName: "CellDropDownQuestion", bundle: nil)
        dropDownDictionary.customCellConfiguration = { (index: Index, item: String, cell: DropDownCell) ->
            Void in
            if let cell = cell as? CellDropDownQuestion {
                cell.leadinglbAnswer.constant = 8
                cell.lbAnswer.font = AppFont.fontRegular12
                cell.lbAnswer.text = item
            }
            return
        }
        // Action triggered on selection
        dropDownDictionary.selectionAction = { [unowned self] (index: Int, item: String) in
            self.idDictionary = self.listDictionary[index].id_dictionary
            RealmDBManager.share.updateLocalConfigDictionary(id: self.idDictionary, id_user: self.id_user)
            self.lblDictionary.text = item
            self.rotateImage()
            self.dropDownDictionary.hide()
        }
        
        dropDownDictionary.cancelAction = { [unowned self] in
            self.rotateImage()
        }
        
        //dropdownSearch
        dropDownSearch.anchorView = self.tfSearch
        dropDownSearch.backgroundColor = UIColor.white
        dropDownSearch.width = self.tfSearch.frame.width
        dropDownSearch.bottomOffset = CGPoint(x: 0, y: (tfSearch.frame.height))
        dropDownSearch.setupCornerRadius(0)
        dropDownSearch.customCellConfiguration = { (index: Index, item: String, cell: DropDownCell) -> Void in
            return
        }
        // Action triggered on selection
        dropDownSearch.selectionAction = { [unowned self] (index: Int, item: String) in
            self.dropDownSearch.hide()
            if item != LocalizableKey.no_find_result.showLanguage {
               self.currentTextSearch = item
            } else {
                self.currentTextSearch = ""
            }
            self.tfSearch.text = item
//            DispatchQueue.main.async {
//                self.getDetailVocabulary(index: index, item: item)
//            }
        }
    }
    
//    func getDetailVocabulary(index: Int,item: String){
//        tfSearch.text = item
//        if isConnection {
//            self.presenter?.lookWordOnline(dictionary_id: idDictionary, word: tfSearch.text ?? "")
//        } else {
//            if let id = self.presenter?.listSearchVocabulary[index].id {
//                self.idDictionary = id
//            }
//        }
//    }
//    func getGetDetailWord(id: Int) {
//        
//    }
//
    func rotateImage(){
        UIView.animate(withDuration: 0.2) {
            self.imgPolygon.transform = self.imgPolygon.transform.rotated(by: CGFloat(Double.pi))
        }
    }
}

extension DictionaryViewController:DictionaryViewProtocol{
    func searchVocabularySuccessed(){
        let data = self.presenter?.listSearchVocabulary.map{$0.word} ?? []
        if data.count == 0 {
            dropDownSearch.dataSource = [LocalizableKey.no_find_result.showLanguage]
        } else {
            dropDownSearch.dataSource = data
        }
        dropDownSearch.show()
    }
    
    func getDetailVocabularySuccessed() {
        if let _detail = self.presenter?.detailVocabulary {
            lblTextSearch.attributedText = _detail.explain.htmlToAttributedString
            hideNoData()
        } else {
            lblTextSearch.text = ""
            showNoData()
        }
        
    }
    
//    func reloadDictionary(){
//        if let dictionary = self.presenter?.listDictionary.first {
//            self.lblDictionary.text = dictionary.name
//            self.idDictionary = dictionary.id
//        }
//        self.dropDownDictionary.dataSource = self.presenter?.listDictionary.map{$0.name}.compactMap{$0} ?? []
//    }
}
