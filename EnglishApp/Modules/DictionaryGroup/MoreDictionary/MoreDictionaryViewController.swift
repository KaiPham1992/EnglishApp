//
//  MoreDictionaryViewController.swift
//  EnglishApp
//
//  Created vinova on 5/15/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import RealmSwift

class MoreDictionaryViewController: ListManagerVC {
    @IBOutlet weak var tbvDictionary: UITableView!
    
	var presenter: MoreDictionaryPresenterProtocol?
    public var callBackChangeDictionary : (() -> ())?

    override func setUpViews() {
        showButtonBack = true
        customTitle = LocalizableKey.addDictionary.showLanguage
        super.setUpViews()
        print(Realm.Configuration.defaultConfiguration.fileURL)
    }
    
    let id_user = Int(UserDefaultHelper.shared.loginUserInfo?.id ?? "0") ?? 0
    
    override func registerTableView() {
        super.registerTableView()
        self.tableView.registerXibFile(MoreDictionaryCell.self)
    }
    
    override func callAPI() {
        self.presenter?.getListDictionary()
    }
    
    override func cellForRowListManager(item: Any, _ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let data = item as! ItemDictionaryResponse
        let cell = tableView.dequeueTableCell(MoreDictionaryCell.self)
        cell.setupCell(isDownloaded: data.isDownload, title: data.name&,isDefault: data.isDefault)
        cell.actionCell = {[weak self] (isDownloaded) in
            self?.processFile(isDownloaded: isDownloaded,item: data)
            
        }
        cell.actionSetDefaultDictionary = {[weak self] (isChoice) in
            data.isDefault = isChoice
            self?.setDefaultDictionary(id: data.id)
        }
        return cell
    }
    
    func setDefaultDictionary(id: Int){
        let listDataItem = listData as! [ItemDictionaryResponse]
        for item in listDataItem {
            if item.isDefault {
                item.isDefault = false
            } else {
                if item.id == id {
                    item.isDefault = true
                }
            }
        }
        RealmDBManager.share.updateLocalConfigDictionary(id: id, id_user: id_user)
        self.callBackChangeDictionary?()
    }
    
    func processFile(isDownloaded: Bool,item: ItemDictionaryResponse){
        if !isDownloaded {
            let link = BASE_URL + item.link_dictionary&
            ProgressView.shared.show()
            FileZipManager.shared.downLoadFile(link: link) {
                ProgressView.shared.hide()
                item.isDownload = true
                self.tableView.reloadData()
                let id_user = Int(UserDefaultHelper.shared.loginUserInfo?.id ?? "0") ?? 0
                let object = LocalConfigDictionary(id: item.id ,name: item.name, id_user: id_user)
                let numberDownloaded = (self.listData as! [ItemDictionaryResponse]).filter({$0.isDownload}).count
                if numberDownloaded == 1 {
                    object.isDefault = 1
                    item.isDefault = true
                }
                RealmDBManager.share.addObject(value: object)
                self.callBackChangeDictionary?()
            }
        } else {
            DispatchQueue.main.async {
                ProgressView.shared.show()
                RealmDBManager.share.removeAllObject(type: WordEntity.self, key: "id_user", value: self.id_user)
                RealmDBManager.share.removeAllObject(type: WordExplainEntity.self, key: "id_user", value: self.id_user)
                RealmDBManager.share.removeObject(type: LocalConfigDictionary.self, value: "\(item.id)\(self.id_user)")
                item.isDownload = false
                self.tableView.reloadData()
                ProgressView.shared.hide()
                self.callBackChangeDictionary?()
            }
        }
    }
}

extension MoreDictionaryViewController : MoreDictionaryViewProtocol {
    func reloadDictionary(data: [ItemDictionaryResponse]){
        initLoadData(data: data)
    }
}
