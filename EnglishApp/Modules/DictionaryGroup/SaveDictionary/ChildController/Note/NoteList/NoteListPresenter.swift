//
//  NoteListPresenter.swift
//  EnglishApp
//
//  Created Steve on 7/25/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class NoteListPresenter: NoteListPresenterProtocol, NoteListInteractorOutputProtocol {

    weak private var view: NoteListViewProtocol?
    var interactor: NoteListInteractorInputProtocol?
    private let router: NoteListWireframeProtocol
    
    var listRespone : [NoteRespone] = []
    var isLoadmore: Bool = true
    var replaceData = true

    init(interface: NoteListViewProtocol, interactor: NoteListInteractorInputProtocol?, router: NoteListWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

    func changeStatusNote(indexPath: IndexPath){
        listRespone[indexPath.row].isDelete = !listRespone[indexPath.row].isDelete
    }
    
    func deleteNote(){
        let listId = self.listRespone.filter{$0.isDelete}.map{Int($0._id ?? "0")}.compactMap{$0}
        self.interactor?.deleteNote(id: listId)
    }
    
    func deleteNoteSuccessed(){
        self.listRespone = self.listRespone.filter{$0.isDelete == false}
        self.view?.reloadViewAfterDelete()
    }
    
    func cancelDelete(){
        for index in 0..<listRespone.count{
            listRespone[index].isDelete = false
        }
        self.view?.reloadViewAfterDelete()
    }
    
    func gotoNote(idNote: String) {
        self.router.gotoNote(idNote: idNote)
    }
    
    func getIdNote(indexPath: IndexPath) -> String?{
        return listRespone[indexPath.row]._id
    }
    
    func gotoAddNote() {
        self.router.gotoAddNote()
    }
    
    func gotoDetailVocabulary() {
        self.router.gotoDetailVocabulary()
    }
    
    func gotoDetailGrammar() {
        self.router.gotoDetailGrammar()
    }
    
    func getNumberRow() -> Int {
        return listRespone.count
    }
    
    func getItemIndexPath(indexPath: IndexPath) -> NoteRespone?{
        return listRespone[indexPath.row]
    }
    
    func checkLoadMore() -> Bool{
        return self.isLoadmore
    }
    
    func getListNote(offset: Int,replaceData: Bool) {
        self.replaceData = replaceData
        self.interactor?.getListNote(offset: offset)
    }
    
    func getListNoteSuccessed(listNote: [NoteRespone]) {
        if listNote.count < limit {
            isLoadmore = false
        }
        if replaceData {
            self.listRespone = listNote
        } else {
            self.listRespone += listNote
        }
        self.view?.reloadView()
    }
}
