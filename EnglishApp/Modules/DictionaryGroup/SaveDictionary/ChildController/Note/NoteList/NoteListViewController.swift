//
//  NoteListViewController.swift
//  EnglishApp
//
//  Created Steve on 7/25/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import XLPagerTabStrip

class NoteListViewController: BaseViewController {

	var presenter: NoteListPresenterProtocol?
	
    @IBAction func addNote(_ sender: Any) {
        self.presenter?.gotoAddNote()
    }
    @IBOutlet weak var tbvNoteList: UITableView!
    
    var offset = 0
    var isDelete = false
    
    var actionDeleteFinish : (()->())?
    
    override func setUpViews() {
        super.setUpViews()
        tbvNoteList.registerXibFile(CellGrammar.self)
        tbvNoteList.dataSource = self
        tbvNoteList.delegate = self
        self.presenter?.getListNote(offset: self.offset,replaceData: true)
    }
    
    func deleteNote(){
        self.presenter?.deleteNote()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(true)
        self.presenter?.cancelDelete()
        actionDeleteFinish?()
    }
}
extension NoteListViewController : NoteListViewProtocol {
    func reloadView() {
        tbvNoteList.reloadData()
    }
    
    func reloadViewAfterDelete(){
        isDelete = false
        tbvNoteList.reloadData()
        actionDeleteFinish?()
    }
    
    func notifyDelete(){
        PopUpHelper.shared.showComfirmPopUp(message: LocalizableKey.cofirm_delete.showLanguage, titleYes: LocalizableKey.confirm.showLanguage.uppercased(), titleNo: LocalizableKey.cancel.showLanguage.uppercased()) { [unowned self] in
            self.presenter?.confirmDelete()
        }
    }
}

extension NoteListViewController : AddNoteDelegate{
    func addNoteSuccessed() {
        self.offset = 0
        self.presenter?.getListNote(offset: self.offset, replaceData: true)
    }
}

extension NoteListViewController : UITableViewDataSource{
    
    func changeStatusDelete(index: IndexPath){
        self.presenter?.changeStatusNote(indexPath: index)
    }
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let row = self.presenter?.noteListRespone?.notes.count ?? 0
        if row == 0 {
            showNoData()
        } else {
            hideNoData()
        }
        return row
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(CellGrammar.self, for: indexPath)
        if let data = self.presenter?.noteListRespone?.notes[indexPath.row] {
            cell.indexPath = indexPath
            cell.setupTitle(title: data.name&)
        }
        
        if isDelete {
            cell.setupDelete()
            cell.actionClick = {[weak self] (index) in
                self?.changeStatusDelete(index: index)
            }
        } else {
            cell.setupNoDelete()
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let row = self.presenter?.noteListRespone?.notes.count ?? 0
        if indexPath.row == row - 1{
            self.offset += limit
            self.presenter?.getListNote(offset: self.offset, replaceData: false)
        }
    }
}
extension NoteListViewController: UITableViewDelegate{
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let id = self.presenter?.noteListRespone?.notes[indexPath.row]._id ?? ""
        self.presenter?.gotoNote(idNote: id)
    }
}
extension NoteListViewController: IndicatorInfoProvider{
    func indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo {
        return IndicatorInfo(title: LocalizableKey.note.showLanguage)
    }
}
