//
//  GrammarPresenter.swift
//  EnglishApp
//
//  Created vinova on 5/16/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class GrammarPresenter: GrammarPresenterProtocol, GrammarInteractorOutputProtocol {
   
    weak private var view: GrammarViewProtocol?
    var interactor: GrammarInteractorInputProtocol?
    private let router: GrammarWireframeProtocol
    var grammarsResponse: GrammarsResponse?
    var isLoadmore = true

    init(interface: GrammarViewProtocol, interactor: GrammarInteractorInputProtocol?, router: GrammarWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func getListGrammar(offset: Int) {
        if isLoadmore {
            self.interactor?.getListGrammar(offset: offset)
        }
    }
    
    func getListGrammarSuccessed(respone: GrammarsResponse) {
        if respone.likes.count < limit {
            isLoadmore = false
        }
        if grammarsResponse == nil {
            self.grammarsResponse = respone
        } else {
            self.grammarsResponse?.likes += respone.likes
        }
        self.view?.reloadView()
    }
    func deleteGrammar() {
        let likeList = self.grammarsResponse?.likes.filter{$0.isDelete}.map{Int($0._id ?? "0") ?? 0} ?? []
        if likeList.count > 0 {
            self.interactor?.deleteGrammar(likeList: likeList)
        } else {
            self.view?.reloadViewAfterDeleted()
        }
    }
    
    func cancelDelete(){
        let number = grammarsResponse?.likes.count ?? 0
        for index in 0..<number{
            grammarsResponse?.likes[index].isDelete = false
        }
        self.view?.reloadViewAfterDeleted()
    }
    
    func deleteGrammarSuccessed() {
        grammarsResponse?.likes = self.grammarsResponse?.likes.filter{!$0.isDelete} ?? []
        self.view?.reloadViewAfterDeleted()
    }
}
