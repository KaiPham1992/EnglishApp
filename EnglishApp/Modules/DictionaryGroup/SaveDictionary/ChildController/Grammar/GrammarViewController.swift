//
//  GrammarViewController.swift
//  EnglishApp
//
//  Created vinova on 5/16/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import XLPagerTabStrip

enum TypeSave{
    case grammar
    case vocabulary
}

class GrammarViewController: ListManagerVC {
    
    var presenter: GrammarPresenterProtocol?
    var isDelete = false
    
    var actionDeleteFinish : (()->())?
    var listDelete: [Int] = []
    
    override func setUpViews() {
        isAddPullToFresh = false
        showButtonBack = false
        super.setUpViews()
        
    }
    
    override func registerTableView() {
        super.registerTableView()
        tableView.registerXibFile(CellGrammar.self)
    }
    
    override func callAPI() {
        super.callAPI()
        self.presenter?.getListGrammar(offset: self.offset)
    }
    
    func deleteGrammar(){
        let listGrammar = self.listData as! [GrammarEntity]
        let listId = listGrammar.filter{$0.isDelete}.map{Int($0._id ?? "0")}.compactMap{$0}
        self.listDelete = listId
        if listDelete.count > 0 {
            self.notifyDelete()
        } else {
            self.reloadViewAfterDeleted()
        }
    }
    
    func notifyDelete() {
        PopUpHelper.shared.showComfirmPopUp(message: LocalizableKey.cofirm_delete.showLanguage, titleYes: LocalizableKey.confirm.showLanguage.uppercased(), titleNo: LocalizableKey.cancel.showLanguage.uppercased()) { [unowned self] in
            self.presenter?.confirmDelete(listId: self.listDelete)
        }
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(true)
        self.cancelDelete()
        actionDeleteFinish?()
    }
    
    func cancelDelete(){
        let listGrammar = listData as! [GrammarEntity]
        for index in 0..<listGrammar.count{
            listGrammar[index].isDelete = false
        }
        self.reloadViewAfterDeleted()
    }
    
    func callAPIAgain(){
        self.offset = 0
        self.presenter?.getListGrammar(offset: self.offset)
    }
    
    override func cellForRowListManager(item: Any, _ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let data = item as! GrammarEntity
        let cell = tableView.dequeue(CellGrammar.self, for: indexPath)
        cell.indexPath = indexPath
        cell.setupTitle(title: data.lesson_name&)
        if isDelete {
            cell.setupDelete(isDelete: data.isDelete)
            cell.actionClick = { (_) in
                data.isDelete = !data.isDelete
            }
        } else {
            cell.setupNoDelete()
        }
        
        return cell
    }
    
    override func didSelectTableView(item: Any, indexPath: IndexPath) {
        let data = item as! GrammarEntity
        if !isDelete {
            let vc = DetailLessonRouter.createModule(idLesson: data._id ?? "0", type: .detailLesson)
            vc.callbackCallAgainAPI = {[unowned self] in
                self.callAPIAgain()
            }
            self.push(controller: vc,animated: true)
        }
    }

    func reloadViewAfterDeleted(){
        isDelete = false
        tableView.reloadData()
        actionDeleteFinish?()
    }
}

extension GrammarViewController : GrammarViewProtocol {
    func reloadView(listData: [GrammarEntity]) {
        initLoadData(data: listData)
    }
    
    func deleteGrammarSuccessed() {
        let listGrammar = self.listData as! [GrammarEntity]
        self.listData = listGrammar.filter{!$0.isDelete}
        reloadViewAfterDeleted()
    }
}

extension GrammarViewController: IndicatorInfoProvider{
    func indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo {
        return IndicatorInfo(title: LocalizableKey.grammar.showLanguage)
    }
}
