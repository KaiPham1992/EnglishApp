//
//  GrammarViewController.swift
//  EnglishApp
//
//  Created vinova on 5/16/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import XLPagerTabStrip

enum TypeSave{
    case grammar
    case vocabulary
}

class GrammarViewController: BaseViewController {
    
    @IBOutlet weak var tbvGrammar: UITableView!
    var presenter: GrammarPresenterProtocol?
    var offset = 0
    var isDelete = false
    
    var actionDeleteFinish : (()->())?
    
    override func setUpViews() {
        super.setUpViews()
        tbvGrammar.registerXibFile(CellGrammar.self)
        tbvGrammar.dataSource = self
        tbvGrammar.delegate = self
        self.presenter?.getListGrammar(offset: self.offset)
    }
    
    func deleteGrammar(){
        self.presenter?.deleteGrammar()
    }
    
    override func viewDidDisappear(_ animated: Bool) {
        super.viewDidDisappear(true)
        self.presenter?.cancelDelete()
        actionDeleteFinish?()
    }
}
extension GrammarViewController : GrammarViewProtocol {
    func reloadView() {
        tbvGrammar.reloadData()
    }
    
    func reloadViewAfterDeleted(){
        isDelete = false
        tbvGrammar.reloadData()
        actionDeleteFinish?()
    }
}

extension GrammarViewController : UITableViewDataSource{
    
    func numberOfSections(in tableView: UITableView) -> Int {
        return 1
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let row =  self.presenter?.grammarsResponse?.likes.count ?? 0
        if row == 0 {
            showNoData()
        } else {
            hideNoData()
        }
        return row
    }
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(CellGrammar.self, for: indexPath)
        if let data = self.presenter?.grammarsResponse?.likes[indexPath.row] {
            cell.indexPath = indexPath
            cell.setupTitle(title: data.lesson_name&)
        }
        
        if isDelete {
            cell.setupDelete()
            cell.actionClick = {[weak self] (index) in
                self?.changeStatusDelete(index: index)
            }
        } else {
            cell.setupNoDelete()
        }
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        let row = self.presenter?.grammarsResponse?.likes.count ?? 0
        if indexPath.row == row - 1{
            self.offset += limit
            self.presenter?.getListGrammar(offset: self.offset)
        }
    }
    
    func changeStatusDelete(index: IndexPath){
        let status = self.presenter?.grammarsResponse?.likes[index.row].isDelete ?? false
        self.presenter?.grammarsResponse?.likes[index.row].isDelete = !status
    }
}
extension GrammarViewController: UITableViewDelegate{
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 50
    }
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
//        self.presenter?.gotoDetailGrammar()
    }
}
extension GrammarViewController: IndicatorInfoProvider{
    func indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo {
        return IndicatorInfo(title: LocalizableKey.grammar.showLanguage)
    }
}
