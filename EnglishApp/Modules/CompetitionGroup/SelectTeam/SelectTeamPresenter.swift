//
//  SelectTeamPresenter.swift
//  EnglishApp
//
//  Created Kai Pham on 5/13/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SelectTeamPresenter: SelectTeamPresenterProtocol, SelectTeamInteractorOutputProtocol {
    func joinTeam(id: String) {
        ProgressView.shared.show()
        Provider.shared.competitionAPIService.joinTeam(id: id, success: { (respone) in
            ProgressView.shared.hide()
            guard let _respone = respone else {return}
            let localConfigCompetition = LocalConfigCompetition(id_user: Int(UserDefaultHelper.shared.loginUserInfo?.id ?? "0") ?? 0, id_team: Int(_respone.team_info?.id ?? "0") ?? 0)
            RealmDBManager.share.addObject(value: localConfigCompetition)
            self.view?.joinTeamSuccessed(respone: _respone)
        }) { (error) in
            ProgressView.shared.hide()
            guard let error = error else {return}
            self.view?.joinTeamFailed(error: error)
        }
    }
    
    func getListFightTestTeam(competitionId: Int, offset: Int) {
        Provider.shared.competitionAPIService.getListFightTestTeam(competitionId: competitionId, offset: offset, success: { (collectionTeam) in
            guard let collectionTeam = collectionTeam else {return}
            let listTeam = collectionTeam.teams
            for item in listTeam {
                let isTeamJoined = item.isTeamJoined ?? 0
                if isTeamJoined == 1 {
                    let localConfigCompetition = LocalConfigCompetition(id_user: Int(UserDefaultHelper.shared.loginUserInfo?.id ?? "0") ?? 0, id_team: Int(item.id ?? "0") ?? 0)
                    RealmDBManager.share.addObject(value: localConfigCompetition)
                    break
                }
            }
            self.view?.didGetListFightTestTeam(collectionTeam: collectionTeam)
        }) { (error) in
            guard let error = error else {return}
            self.view?.didGetListFightTestTeam(error: error)
        }
    }
    
    
    func createTeam(id: Int, name: String) {
        ProgressView.shared.show()
        Provider.shared.competitionAPIService.createTeamFight(idCompetition: id, name: name, success: { (respone) in
            ProgressView.shared.hide()
            if let _respone = respone {
                let localConfigCompetition = LocalConfigCompetition(id_user: Int(UserDefaultHelper.shared.loginUserInfo?.id ?? "0") ?? 0, id_team: Int(_respone.id ?? "0") ?? 0)
                RealmDBManager.share.addObject(value: localConfigCompetition)
                self.view?.didCreateTeamSuccessed(collectionTeam: _respone)
            }
        }) { (error) in
            ProgressView.shared.hide()
            if let _error = error {
                self.view?.didGetListFightTestTeam(error: _error)
            }
        }
    }

    weak private var view: SelectTeamViewProtocol?
    var interactor: SelectTeamInteractorInputProtocol?
    private let router: SelectTeamWireframeProtocol

    init(interface: SelectTeamViewProtocol, interactor: SelectTeamInteractorInputProtocol?, router: SelectTeamWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }

}
