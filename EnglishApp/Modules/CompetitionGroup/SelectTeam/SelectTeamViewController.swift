//
//  SelectTeamViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 5/13/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class SelectTeamViewController: BaseViewController {

    
    @IBOutlet weak var btnCreateTeam: UIButton!
    
	var presenter: SelectTeamPresenterProtocol?
    
    @IBOutlet weak var tbTeam: UITableView!
    
    var maxMember = 0
    var competitionId: Int?
    var isCannotJoin = false

    var listTeam = [TeamEntity]() {
        didSet {
            tbTeam.reloadData()
            
            if listTeam.count == 0 {
                showNoData()
            } else {
                hideNoData()
            }
        }
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        configureTable()
        presenter?.getListFightTestTeam(competitionId: competitionId*)
        hideTabbar()
        if isCannotJoin {
            btnCreateTeam.isHidden = true
        }
    }
    
    override func btnBackTapped() {
        showTabbar()
        self.pop()
    }

    override func setTitleUI() {
        super.setTitleUI()
        addBackToNavigation()
        setTitleNavigation(title: LocalizableKey.selectTeamJoin.showLanguage)
    }
    
    @IBAction func btnCreateGroup() {
        let isUserStudyPack = UserDefaultHelper.shared.loginUserInfo?.isUserStudyPack ?? false
        let isUserPremium = UserDefaultHelper.shared.loginUserInfo?.isUserPremium ?? false
        if !isUserStudyPack && !isUserPremium {
            PopUpHelper.shared.showUpdateFeature(completeUpdate: {[unowned self] in
                let vc = StoreViewController()
                self.push(controller: vc)
            }) {
                
            }
        } else {
            PopUpHelper.shared.showCreateGroup(completionNo: {
                
            }) { [unowned self] (message) in
                let name = message?.trimmingCharacters(in: CharacterSet.whitespacesAndNewlines) ?? ""
                if name.isEmpty {
                    PopUpHelper.shared.showError(message: " Vui lòng nhập tên nhóm", completionYes: {
                        
                    })
                } else {
                    self.presenter?.createTeam(id: self.competitionId ?? 0, name: message!)
                }
            }
        }
    }
}


extension SelectTeamViewController: UITableViewDelegate, UITableViewDataSource {
    func configureTable() {
        tbTeam.delegate = self
        tbTeam.dataSource = self
        tbTeam.registerXibFile(SelectTeamCell.self)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(SelectTeamCell.self, for: indexPath)
        cell.displayData(maxMember: self.maxMember, team: listTeam[indexPath.item], isCannotJoin: self.isCannotJoin)
        cell.btnJoin.tag = indexPath.item
        cell.btnJoined.tag = indexPath.item
        cell.btnJoin.addTarget(self, action: #selector(btnJoinTapped), for: .touchUpInside)
        cell.btnJoined.addTarget(self, action: #selector(btnJoined), for: .touchUpInside)
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return listTeam.count
    }
    
    @objc func btnJoined(sender: UIButton) {
        if let id = listTeam[sender.tag].id {
            let vc = DetailTeamRouter.createModule(id: id)
            vc.actionLeaveTeam = { [weak self] in
                self?.presenter?.getListFightTestTeam(competitionId: self?.competitionId ?? 0)
            }
            self.push(controller: vc)
        }
    }
    @objc func btnJoinTapped(sender: UIButton) {
        if let id = listTeam[sender.tag].id {
            self.presenter?.joinTeam(id: id)
        }
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, estimatedHeightForRowAt indexPath: IndexPath) -> CGFloat {
        return 80
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let id = listTeam[indexPath.row].id, let isTeamJoined = listTeam[indexPath.row].isTeamJoined {
            let vc = DetailTeamRouter.createModule(id: id, isTeamJoined: isTeamJoined)
            self.push(controller: vc)
        }
    }
}
extension SelectTeamViewController: SelectTeamViewProtocol{
    
    func joinTeamFailed(error: APIError) {
        if error.message == "THIS USER JOINED TEAM" {
            PopUpHelper.shared.showError(message: "Bạn đã có nhóm không thể tạo và tham gia nhóm khác.", completionYes: nil)
        }
    }
    
    func joinTeamSuccessed(respone: DetailTeamEntity) {
        let vc = DetailTeamRouter.createModule(teamDetail: respone)
        vc.actionBackView = { [weak self] in
            self?.presenter?.getListFightTestTeam(competitionId: self?.competitionId ?? 0)
        }
        self.push(controller: vc)
    }
    
    func didGetListFightTestTeam(error: APIError) {
        if error.message == "THIS USER CREATED AND JOINED TEAM" {
            PopUpHelper.shared.showError(message: "Bạn đã có nhóm không thể tạo và tham gia nhóm khác.", completionYes: nil)
        }
    }
    
    func didGetListFightTestTeam(collectionTeam: CollectionTeamEntity) {
        guard  let _maxMember = collectionTeam.maxMember else {
            showNoData()
            return
        }
        self.listTeam = collectionTeam.teams
        self.maxMember = _maxMember
        tbTeam.reloadData()
    }
    
    func didCreateTeamSuccessed(collectionTeam: TeamEntity){
        collectionTeam.isTeamJoined = 1
        collectionTeam.countMember = "1"
        listTeam.insert(collectionTeam, at: 0)
    }
}
