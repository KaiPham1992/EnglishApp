//
//  FightPresenter.swift
//  EnglishApp
//
//  Created Steve on 8/10/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class FightPresenter: FightPresenterProtocol, FightInteractorOutputProtocol {
    
    weak private var view: FightViewProtocol?
    var interactor: FightInteractorInputProtocol?
    private let router: FightWireframeProtocol
    
    var exerciseEntity: ViewExerciseEntity?
    var indexPath: IndexPath?
    var indexQuestion: IndexPath?
    var error: APIError?

    init(interface: FightViewProtocol, interactor: FightInteractorInputProtocol?, router: FightWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func getViewFightCompetition(id: String) {
        self.interactor?.getViewFightCompetition(id: id)
    }
    
    
    func gotoDetailVocabulary() {
        self.router.gotoDetailVocabulary()
    }
    
    func getIDExercise() -> Int?{
        return Int(exerciseEntity?._id ?? "0")
    }
    
    func getAllTime() -> [Int]? {
        return exerciseEntity?.questions?.map{$0.question_time}.compactMap{Int($0 ?? "0")}
    }
    
    func submitExercise(param: SubmitExerciseParam) {
        self.interactor?.submitExercise(param: param)
    }
    
    func getTotalTime() -> Int?{
        return exerciseEntity?.total_times
    }
    
    func gotoResult(result: TestResultProfileEntity) {
        self.router.gotoResult(result: result, type: .assignExercise)
    }
    
    func getAllId() -> [Int]?{
        return exerciseEntity?.questions?.map{Int($0._id ?? "0") ?? 0}
    }
    
    func getTime(index: Int) -> Int? {
        return Int(exerciseEntity?.questions?[index].question_time ?? "0")
    }
    
    func getQuestion(indexPath: IndexPath) -> QuestionEntity? {
        return exerciseEntity?.questions?[indexPath.row]
    }

    func getExerciseSuccessed(respone: ViewExerciseEntity) {
        self.exerciseEntity = respone
        self.view?.reloadView()
    }
    
    func getExerciseFailed(error: APIError) {
        self.view?.getExerciseFailed(error: error)
    }
    
    func exitSuccessed(respone: TestResultProfileEntity){
        self.router.gotoResult(result: respone, type: .dailyMissonExercise)
        self.view?.exitSuccessed()
    }
    
    func exitExercise(id: Int) {
        self.interactor?.exitExercise(id: id)
    }
    
    func suggestQuestion(id: String, indexPath: IndexPath, indexQuestion: IndexPath,isDiamond: Bool) {
        self.interactor?.suggestQuestion(id: id, isDiamond: isDiamond)
        self.indexPath = indexPath
        self.indexQuestion = indexQuestion
    }
    
    func suggestQuestionSuccessed(respone: [String]) {
        let options = self.exerciseEntity?.questions?[indexPath?.row ?? 0].answers?[indexQuestion?.row ?? 0].options.filter{!respone.contains($0._id ?? "")} ?? []
        self.exerciseEntity?.questions?[indexPath?.row ?? 0].answers?[indexQuestion?.row ?? 0].options = options
        self.view?.suggesQuestionSuccessed(indexPath: self.indexPath ?? IndexPath(row: 0, section: 0), indexQuestion: self.indexQuestion ?? IndexPath(row: 0, section: 0))
    }
    func suggestQuestionError(error: APIError) {
        self.error = error
        self.view?.suggestQuestionError()
    }
}
