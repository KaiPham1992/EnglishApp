//
//  CompetitionViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 5/13/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import XLPagerTabStrip

enum ResultCompetition {
    case result
    case competition
}

class CompetitionViewController: BaseViewController {
    
    
    @IBOutlet weak var tbCompetition: UITableView!
	var presenter: CompetitionPresenterProtocol?
    
    var listCompetition = [CompetitionEntity]() {
        didSet {
            tbCompetition.reloadData()
        }
    }
    
    var type : ResultCompetition = .competition
    
    override func setTitleUI() {
        super.setTitleUI()
        setTitleNavigation(title: LocalizableKey.titleCompetition.showLanguage)
    }

	override func viewDidLoad() {
        super.viewDidLoad()
        
//        listCompetition = CompetitionEntity.toArray()
        configureTable()
        if type == .competition{
            presenter?.getListFight()
        } else {
            self.presenter?.getListResultFight()
        }
    }
}

extension CompetitionViewController: UITableViewDelegate, UITableViewDataSource {
    func configureTable() {
        tbCompetition.delegate = self
        tbCompetition.dataSource = self
        tbCompetition.registerXibFile(CompetitionCell.self)
        tbCompetition.separatorStyle = .none
        
        tbCompetition.estimatedRowHeight = 55
        tbCompetition.rowHeight = UITableView.automaticDimension
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(CompetitionCell.self, for: indexPath)
        cell.type = self.type
        cell.competitionEntity = listCompetition[indexPath.item]
        cell.btnJoin.tag = indexPath.item
        cell.btnJoin.addTarget(self, action: #selector(btnJoinTapped), for: .touchUpInside)
        //---
        cell.btnShare.tag = indexPath.item
        cell.btnShare.addTarget(self, action: #selector(btnShareTapped), for: .touchUpInside)
        
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        let row = listCompetition.count
        if row == 0 {
            self.tbCompetition.isHidden = true
            return 0
        }
        self.tbCompetition.isHidden = false
        return row
    }
    
    @objc func btnJoinTapped(sender: UIButton) {
        if type == .competition{
            self.push(controller: SelectTeamRouter.createModule())
        }
        if type == .result{
            self.push(controller: ResultGroupRouter.createModule(idCompetition: listCompetition[sender.tag].id&))
        }
       
    }
    
    @objc func btnShareTapped() {
        ShareNativeHelper.shared.showShareLinkInstall()
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 170
    }
}

extension CompetitionViewController: IndicatorInfoProvider{
    func indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo {
        return IndicatorInfo(title: LocalizableKey.action.showLanguage)
    }
}
extension CompetitionViewController: CompetitionViewProtocol{
    func didGetList(competitionList: CollectionCompetitionEntity) {
        guard let competition = competitionList.competitionEntity else {return}
        self.listCompetition = competition
    }
    
    func didGetList(error: Error) {
        print(error.localizedDescription)
    }
    
    func didGetResultFight(resultFight: CompetitionProfileEntity) {
        guard let competition = resultFight.results else {return}
        self.listCompetition = competition.map{CompetitionEntity(competitionResultsProfileEntity: $0)}.compactMap{$0}
    }
}
