//
//  QAViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 5/13/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//
import UserNotifications
import UIKit

class QAViewController: BaseViewController {

	var presenter: QAPresenterProtocol?
    @IBOutlet weak var tbHistory: UITableView!
    @IBOutlet weak var lbWhatQa: UILabel!
    @IBOutlet weak var lbMessage: UILabel!
    @IBOutlet weak var lbOlderQA: UILabel!
    @IBOutlet weak var tfQuestion: UITextField!
    
    @IBOutlet weak var lbError: UILabel!
    @IBOutlet weak var heightError: NSLayoutConstraint!
    let frefresh = UIRefreshControl()
    
    var listHistory = [QAEntity]() {
        didSet {
            tbHistory.reloadData()
        }
    }
    
    override func setTitleUI() {
        super.setTitleUI()
        hideTabbar()
        lbWhatQa.text = LocalizableKey.whatQA.showLanguage
        lbMessage.text = LocalizableKey.messageQA.showLanguage
        tfQuestion.placeholder = LocalizableKey.enterQA.showLanguage
        lbOlderQA.text = LocalizableKey.qAOlder.showLanguage
        heightError.constant = 0
        tfQuestion.addTarget(self, action: #selector(textDidChange), for: .editingChanged)
        tfQuestion.delegate = self
    }
    
    override func btnBackTapped() {
        showTabbar()
        self.pop()
    }
    
    override func setUpNavigation() {
        super.setUpNavigation()
        addBackToNavigation()
        setTitleNavigation(title: LocalizableKey.titleQA.showLanguage)
    }
	override func viewDidLoad() {
        super.viewDidLoad()
        configureTable()
        
        presenter?.loadMoreQA()
    }

    func pushNotification() {
        let content = UNMutableNotificationContent()
        content.title = "Thông báo"
        content.body = "Bạn bị trừ mật ong."
        content.sound = UNNotificationSound.default
        content.badge = 1
        
        let trigger = UNTimeIntervalNotificationTrigger(timeInterval: 0.2, repeats: false)
        let request = UNNotificationRequest(identifier: "TestIdentifier", content: content, trigger: trigger)
        
        UNUserNotificationCenter.current().add(request) { (error) in
            if let error = error {
                print("Unable to Add Notification Request (\(error), \(error.localizedDescription))")
            }
        }
    }
    
    @IBAction func btnSearchTapped() {
        self.dismissKeyBoard()
        if UserDefaultHelper.shared.loginUserInfo?.amountHoney ?? 0 < 5 {
            PopUpHelper.shared.showNotEnoughtBee(completionNo: nil) {
                let storeViewController = StoreViewController()
                DispatchQueue.main.asyncAfter(deadline: .now() + 0.15, execute: {
                    storeViewController.moveToViewController(at: 1)
                })
                self.push(controller: storeViewController)
            }
        } else {
            if tfQuestion.text& == "" {
                heightError.constant = 18
                lbError.text = LocalizableKey.pleaseEnterQA.showLanguage
            } else {
                PopUpHelper.shared.showComfirmPopUp(message: "\(LocalizableKey.deductFiveHoney.showLanguage)", titleYes: "\(LocalizableKey.confirm.showLanguage)", titleNo: "\(LocalizableKey.cancel.showLanguage)") {
                    self.presenter?.sendQA(qa: self.tfQuestion.text&)
                    self.tfQuestion.text = ""
                }
                
                //-- remove me
//                pushNotification()
                
            }
        }
    }

}


extension QAViewController: UITableViewDelegate, UITableViewDataSource {
    @objc func refreshData() {
        presenter?.listQA.removeAll()
        presenter?.loadMoreQA()
        tbHistory.refreshControl?.endRefreshing()
    }
    
    func configureTable() {
        tbHistory.delegate = self
        tbHistory.dataSource = self
        tbHistory.registerXibFile(QACell.self)
        tbHistory.separatorStyle = .none
        
        tbHistory.estimatedRowHeight = 55
        tbHistory.rowHeight = UITableView.automaticDimension
        tbHistory.refreshControl = frefresh
        tbHistory.refreshControl?.addTarget(self, action: #selector(refreshData), for: .valueChanged)
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(QACell.self, for: indexPath)
        if indexPath.item < presenter?.listQA.count ?? 0 {
            cell.qa = presenter?.listQA[indexPath.item]
        }
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return presenter?.listQA.count ?? 0
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let vc = QADetailRouter.createModule(qa: self.listHistory[indexPath.item])
        self.push(controller: vc)
    }
    
    func tableView(_ tableView: UITableView, willDisplay cell: UITableViewCell, forRowAt indexPath: IndexPath) {
        if indexPath.row >= ((presenter?.listQA.count ?? 0) - 5) && presenter?.canLoadMore == true {
            presenter?.loadMoreQA()
        }
    }
}

extension QAViewController: QAViewProtocol {
    func didGetQA(list: [QAEntity]) {
        if list.isEmpty {
            showNoData()
        } else {
            hideNoData()
            self.listHistory = list
        }
    }
    
}

extension QAViewController: UITextFieldDelegate {
    func textField(_ textField: UITextField, shouldChangeCharactersIn range: NSRange, replacementString string: String) -> Bool {
        guard let textFieldText = textField.text,
            let rangeOfTextToReplace = Range(range, in: textFieldText) else {
                return false
        }
        let substringToReplace = textFieldText[rangeOfTextToReplace]
        let count = textFieldText.count - substringToReplace.count + string.count
        return count <= 255
    }
    
    @objc func textDidChange() {
        
        if tfQuestion.text& != "" {
            heightError.constant = 0
        }
        
        if tfQuestion.text?.count == 255 {
            lbError.text = LocalizableKey.pleaseEnter255Digit.showLanguage
            heightError.constant = 18
        } else {
            heightError.constant = 0
        }
    }
    
}
