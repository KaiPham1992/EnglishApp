//
//  StudyPackPresenter.swift
//  EnglishApp
//
//  Created Kai Pham on 5/20/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class StudyPackPresenter: StudyPackPresenterProtocol, StudyPackInteractorOutputProtocol {
    
    weak private var viewBeePack: BeePackViewProtocol?

    weak private var view: StudyPackViewProtocol?
    var interactor: StudyPackInteractorInputProtocol?
    private let router: StudyPackWireframeProtocol
    
    var fromDoEntrance = false
    var point = 0
    
    var canLoadMore: Bool = false
    var lisPackage: [Inventories] = []
    
    func exchangeGift(id: String, type: String) {
        ProgressView.shared.show()
        Provider.shared.productAPIService.exchangeGift(id: id, type: type, success: { (success) in
            ProgressView.shared.hide()
            self.view?.didExchangeGift()
        }) { (error) in
            ProgressView.shared.hide()
            guard let error = error else {return}
            print(error.localizedDescription)
            self.view?.didGetError(error: error)
        }
    }
    
    func getProduct() {
        ProgressView.shared.show()
        Provider.shared.productAPIService.getListProduct(fromDoEntrance: fromDoEntrance, point: point, success: { collectionProduct in
            ProgressView.shared.hide()
            guard let product = collectionProduct else { return }
            self.view?.didGetProduct(product: product)
        }) { _ in
            ProgressView.shared.hide()
            
        }
    }

    init(interface: StudyPackViewProtocol, interactor: StudyPackInteractorInputProtocol?, router: StudyPackWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
    
    func getPackage() {
        canLoadMore = false
        Provider.shared.userAPIService.getPackage(offset: lisPackage.count ,success: { (success) in
            guard let packages = success?.inventories else { return }
            self.lisPackage.append(contentsOf: packages)
            if packages.count == limit {
                self.canLoadMore = true
            }
            self.view?.didGetPackage(package: self.lisPackage)
        }) { (error) in
            guard let error = error else { return }
            print(error.localizedDescription)
        }
    }
    
    func sendRedeem(code: String) {
        ProgressView.shared.show()
        Provider.shared.productAPIService.sendRedeem(code: code, success: { (success) in
            ProgressView.shared.hide()
//            guard let data = success else {return}
            self.view?.didSendRedeem()
        }) { (error) in
            ProgressView.shared.hide()
            guard let error = error else {return}
            self.view?.didSendRedeem(error: error)
        }
    }

}
