//
//  BeePackViewController.swift
//  EnglishApp
//
//  Created Kai Pham on 5/20/19.
//  Copyright © 2019 demo. All rights reserved.
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit
import XLPagerTabStrip

class BeePackViewController: BaseViewController, BeePackViewProtocol {
    func didUpgrade(info: UpgradeInfoEntity) {
        NotificationCenter.default.post(name: Notification.Name(rawValue: "UpdateProfile"), object: nil)
        PopUpHelper.shared.showError(message: "\(LocalizableKey.upgradeSuccess.showLanguage)") {
            //
        }
    }
    
    func didUpgrade(error: Error) {
        PopUpHelper.shared.showError(message: "\(LocalizableKey.getError.showLanguage)") {
            //
        }
    }
    
    let frefresh = UIRefreshControl()
    var presenter: BeePackPresenterProtocol?
    @IBOutlet weak var tbBeePack: UITableView!
    @IBOutlet weak var lbTotal: UILabel!
    
    var listBeePack = [ProductEntity]() {
        didSet {
            
            tbBeePack.reloadData()
            
        }
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configureTable()
        listBeePack = UserDefaultHelper.shared.collectionProduct.groupHoney
        if let totalHoney = UserDefaultHelper.shared.loginUserInfo?.amountHoney*.description.formatNumber(type: ".") {
            lbTotal.attributedText = NSAttributedString(string: "\(LocalizableKey.totalHoney.showLanguage )" + totalHoney)
            lbTotal.isHidden = false
        } else {
            lbTotal.isHidden = true
        }
    }
    
    func upgradeBeePack(id: String, inAppPurchase: String) {
        PopUpHelper.shared.showComfirmPopUp(message: "\(LocalizableKey.upgradeBeePack.showLanguage)", titleYes: "\(LocalizableKey.confirm.showLanguage)", titleNo: "\(LocalizableKey.cancel.showLanguage.uppercased())") {
            ProgressView.shared.show()
            PaymentHelper.shared.purcharseProduct(inAppPurchase, completionPurchased: { transactionIdAny in
                ProgressView.shared.hide()
                guard let transactionId = transactionIdAny as? String else { return }
                
                self.presenter?.upgradeProduct(productID: id, transactionId: transactionId)
            }, purchaseFailed: {
                ProgressView.shared.hide()
            })
            
        }
    }
    
}

extension BeePackViewController: IndicatorInfoProvider{
    func indicatorInfo(for pagerTabStripController: PagerTabStripViewController) -> IndicatorInfo {
        return IndicatorInfo(title: LocalizableKey.beePack.showLanguage)
    }
}

extension BeePackViewController: UITableViewDelegate, UITableViewDataSource {
    func configureTable() {
        tbBeePack.delegate = self
        tbBeePack.dataSource = self
        tbBeePack.registerXibFile(BeePackCell.self)
        tbBeePack.separatorStyle = .none
        
        tbBeePack.estimatedRowHeight = 55
        tbBeePack.rowHeight = UITableView.automaticDimension
        tbBeePack.refreshControl = frefresh
        tbBeePack.refreshControl?.addTarget(self, action: #selector(refreshData), for: .valueChanged)
    }
    
    @objc func refreshData() {
        listBeePack = UserDefaultHelper.shared.collectionProduct.groupHoney
        tbBeePack.refreshControl?.endRefreshing()
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeue(BeePackCell.self, for: indexPath)
        cell.item = self.listBeePack[indexPath.row]
        return cell
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.listBeePack.count
    }
    
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        return 109
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        if let id = self.listBeePack[indexPath.item].id, let inAppPurchase = self.listBeePack[indexPath.item].in_app_product_id {
            upgradeBeePack(id: id, inAppPurchase: inAppPurchase)
        }
    }
}
